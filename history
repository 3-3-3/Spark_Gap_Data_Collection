 1/1: import cryptography
 1/2: import flask
 2/1: import pandas
 3/1: import pandas
 3/2: import numpy
 3/3: import astropy
 4/1: import pandas
 5/1: import pandas
 5/2:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
 5/3:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

csv = "48a3baaf-8ac6-45c6-8880-0adce230ee04.csv"
df = pd.read_csv(csv)
 5/4: df
 5/5:
for i in df.iterrows()[:10]:
    print i['light_sensor']
 5/6:
for i in df.iterrows()[:10]:
    print(i['light_sensor'])
 5/7:
for i in df.iterrows():
    print(i['light_sensor'])
 5/8:
for index, row in df.iterrows():
    index
 5/9:
for index, row in df.iterrows():
    print(index)
5/10:
for index, row in df.iterrows():
    print(row['light_sensor'])
5/11:
for index, row in df.iterrows():
    print((row['light_sensor'], row['sensor_a0']))
5/12: df['light_sensor']
5/13: lgiht_sensor = df['light_sensor'].to_numpy()
5/14: light_sensor = df['light_sensor'].to_numpy()
5/15:
light_sensor = df['light_sensor'].to_numpy()
light_sensor
5/16:
light_sensor = df['light_sensor'].to_numpy()
light_sensor = light_sensor[~numpy.isnan(light_sensor)]
5/17:
light_sensor = df['light_sensor'].to_numpy()
light_sensor = light_sensor[~np.isnan(light_sensor)]
5/18: light_sensor
5/19: len(light_sensor)
5/20: l = light_sensor[0:100]
5/21: l
5/22: x = np.arange(len(l))
5/23: plt.plot(x, l)
5/24: l = light_sensor[0:50]
5/25: x = np.arange(len(l))
5/26: plt.plot(x, l)
5/27:
plt.style.use('ggplot')
plt.plot(x, l)
5/28:
plt.style.use('ggplot')
plt.plot(x, l)
5/29:
plt.style.use('ggplot')
plt.title("Light Sensor Data")
plt.xlabel("Sensor Readout")
plt.plot(x, l)
5/30:
plt.style.use('ggplot')
plt.title("Light Sensor Data")
plt.ylabel("Sensor Readout")
plt.plot(x, l)
5/31:
plt.style.use('ggplot')
plt.title("Light Sensor Data")
plt.ylabel("Sensor Readout")
plt.figsize((10,10))
plt.plot(x, l)
5/32:
plt.style.use('ggplot')
plt.title("Light Sensor Data")
plt.ylabel("Sensor Readout")
plt.figure(figsize=(10,10))
plt.plot(x, l)
5/33:
plt.style.use('ggplot')
plt.title("Light Sensor Data")
plt.ylabel("Sensor Readout")
plt.figure(figsize=(10,10))
plt.plot(x, l)
plt.show()
5/34:
plt.style.use('ggplot')
plt.figure(figsize=(10,10))
plt.title("Light Sensor Data")
plt.ylabel("Sensor Readout")
plt.plot(x, l)
plt.show()
5/35:
plt.style.use('ggplot')
plt.figure(figsize=(10,15))
plt.title("Light Sensor Data")
plt.ylabel("Sensor Readout")
plt.plot(x, l)
plt.show()
5/36:
plt.style.use('ggplot')
plt.figure(figsize=(15,10))
plt.title("Light Sensor Data")
plt.ylabel("Sensor Readout")
plt.plot(x, l)
plt.show()
5/37: l = light_sensor[0:100]
5/38: x = np.arange(len(l))
5/39:
plt.style.use('ggplot')
plt.figure(figsize=(15,10))
plt.title("Light Sensor Data")
plt.ylabel("Sensor Readout")
plt.plot(x, l)
plt.show()
5/40:
plt.style.use('ggplot')
plt.figure(figsize=(15,10))
plt.title("Light Sensor Data")
plt.ylabel("Sensor Readout")
plt.plot(x, l)
plt.savefig("Light_Readout.png")
 4/2: quti()
23/1: r_d = 0.15
23/2: r_s = 1.5
23/3: m_d = 60
23/4: m_s = 5
23/5: i_d = (2/3)*m_d*(r_d)*(r_d)
23/6: i_d
23/7: i_s = (2/3)*m_s*(r_s)*(r_s)
23/8: i_s
23/9: i_net = i_d+i_s
23/10: i_net
23/11: tau = i_net*60
23/12: tau
23/13: tau/0.15
23/14: 3360/9.8
23/15: tau = i_net*24
23/16: tau
23/17: tau/0.15
23/18: 1344/9.8
23/19: 137/2
23/20: r_d*70/i_net
23/21: (2*r_d*70)/i_net
23/22: 1344/2
23/23: 670*0.15*2/i_net
23/24: math
23/25: import math
23/26: math.pi
23/27: 5*math.pi
23/28: 5*math.pi/2
23/29: 5*math.pi/2/
23/30: 5*math.pio/2*12
23/31: 5*math.pi/2*12
23/32: 5*math.pi/(2*12)
23/33:
273+(273+75
)
23/34: 621/2
23/35: 313950/310.5
23/36: 313950/(75+273)
24/1: import math
24/2: (2.8*900*43+1*4186*20)/(4186+2.8*900)
25/1: import units
25/2: units.predefined.define_units()
25/3: import units.predefined
25/4: units.predefined.define_units()
25/5: math.ln(2)
25/6: import math
25/7: math.ln(2)
25/8: math.e
25/9: math.log((273+28)/(273+43))*2.8*900
25/10: math.log((273+28)/(273+20))*4186
25/11: 2.8*900
25/12: math.log((273+28)/(273+43))
25/13: 2.8*900*(273+43)
25/14: 4186*(20+273)
25/15: 4186*(20+273)+2.8*900*(273+43)
25/16: 2022818.0/(4186+900*2.8)
25/17: 301-273
25/18: 4186*20-2.8*900*43
25/19: (4186*20-2.8*900*43)/(2.8*900-4186)
25/20: (2.8*900*43+4186*20)/(4186+900*2.8)
25/21: 2.8*900*math.log((273+29)/(273+43))
25/22: 2.8*900*math.log((273+2.8*900*28.643006263048015)/(273+43))
25/23: 2.8*900*log((273+28.643006263048015)/(273+43))
25/24: 2.8*900*math.log((273+28.643006263048015)/(273+43))
25/25: 4186*log((273+28.643006263048015)/(273+20))
25/26: 4186*math.log((273+28.643006263048015)/(273+20))
25/27: 121.69376222940801+-117.17494464880
25/28: (2*100)/(2/3*60*0.15^2)
25/29: (2*100)/(2/3*60*0.15*0.15)
25/30: 12/222
25/31: 222*0.05
25/32: 202*0.05
25/33: 220*0.05
25/34: i_d = 2/3*60*0.15^2
25/35: i_d = 2/3*60*0.15*0.15
25/36: i_d
25/37: i_s = 2/3*5*1.5*1.5
25/38: i_s
25/39: i_net = i_s+i_d
25/40: i_net
25/41: i_d/i_net
25/42: i_d/i_net*11
25/43: Dt = 5*math.pi/2
25/44: Dt
25/45: Dt/1.18
25/46: Dt/11.8
25/47: 220*0.5
25/48: 110/0.3
25/49: 400/i_d
25/50: 300/i_d
25/51: 350/i_d
25/52: 330/i_d
25/53: 330/2
25/54: 165/0.15
25/55: i_d/(i_net)*110
25/56: 370*0.3
25/57: 2*165/i_d
25/58: 5*math.pi/2
25/59: (5*math.pi/2)/12
25/60: t=(5*math.pi/2)/12
25/61: v = (2.8*t+1/2*(-9.8*t*t)-0.7)/(t*math.tan(math.radians(20)))
25/62: v
25/63: 4.1*0.65
25/64: 2.665/math.cos(math.radians(20))
25/65: i_d2=(1/3*4*1.8*1.8+2/3*56*(0.15*0.15))
25/66: i_d2
25/67: i_d2=(1/3*5*1.8*1.8+2/3*55*(0.15*0.15))
25/68: i_d2
25/69: i_s
25/70: (math.pi*i_s-12*(i_net))/i_d2
25/71: (50*9.8*20-0.5*50*4.0^2)/20
25/72: (50*9.8*20-0.5*50*4*4)/20
25/73: 16/40
25/74: 0.4*50-9.8*50
25/75: (0.5*0.5*470)/0.4
25/76: 0.4/0.5
25/77: 0.5*470/290
25/78: 20/0.5
25/79: 40/(2*math.pi)
25/80: 7.8e3
25/81: 7.8e3*4/3*math.pi*20*20*20
25/82: 261380508.77867076*450*(1808+100)+261380508.77867076*289e3
25/83: 3200/2*0.4*0.4-8.0*9.8*4.0
25/84: 4**
25/85: -57.6/6.0
25/86: 9.6/(8*9.8)
25/87: 8.0*9.8*4.0
25/88: (8.0*9.8*4.0)/57.6
25/89: (23.5*9.8+72.5*9.8)/((1+1/(0.115*0.316)))
25/90: 32.989821873130445/0.115
25/91: l = 4.20
25/92: mp = 72.5
25/93: ml = 23.5
25/94: mew_1 = 0.316
25/95: mew_2 = 0.115
25/96: theta = math.radians(25)
25/97: g = 9.8
25/98: x = (l*((ml*g+mp*g)/(1/(mew_1*mew_2)+1)*math.sin(theta))+l*((ml*g+mp*g)/(mew_2*(1/(mew_1*mew_2)+1)*math.cos(theta)))-(l/2)*ml*g*math.sin(theta))/(mp*g*math.sin(theta))
25/99: x
25/100: 3.7/2
25/101: math.sqrt(23.9*(0.700*9.8*cos(math.radians(8))-9.8*sin(math.radians(8))))
25/102: math.sqrt(23.9*(0.700*9.8*math.cos(math.radians(8))-9.8*math.sin(math.radians(8))))
25/103: 23.9-1.85
25/104: 23.9+1.85
25/105: math.sqrt(25.750*(0.700*9.8*math.cos(math.radians(7.5))-9.8*math.sin(math.radians(7.5))))
25/106: math.sqrt(25.750*(0.700*9.8*math.cos(math.radians(8.5))-9.8*math.sin(math.radians(8.5))))
25/107: math.sqrt(22.0500*(0.700*9.8*math.cos(math.radians(8.5))-9.8*math.sin(math.radians(8.5))))
25/108: math.sqrt(25.750*(0.700*9.8*math.cos(math.radians(7.5))-9.8*math.sin(math.radians(7.5))))
25/109: 11.924575167721772-10.847182624475172
25/110: 1.0773925432465994/2
25/111: 22/2.23694
25/112: 1/2.23694
25/113: 22/2.23694+0.4470392589877243
25/114: 22/2.23694-0.4470392589877243
25/115: 11.391+0.539
25/116: 11.391-0.539
26/1: import boto3
27/1: import boto3
27/2: import json
27/3: client = boto3.client("iot-data")
27/4: client.publish(topic="$aws/stream/example", qos=1, payload=json.dumps("liam" : "Keeley"))
27/5: client.publish(topic="$aws/stream/example", qos=1, payload=json.dumps({"liam" : "Keeley"}))
27/6: client.publish(topic="/stream/example", qos=1, payload=json.dumps({"liam" : "Keeley"}))
27/7: client.publish(topic="/stream/example", qos=1, payload=json.dumps({"liam" : "Keeley"}))
27/8: client.publish(payload=json.dumps({"Liam" : "Keeley"}))
28/1: import generator
28/2: import generator
28/3: generator.fake_data()
28/4:
for i in generator.fake_data():
    print(i)
28/5:
for i in generator.fake_data():
    print(i)
29/1: import generator
29/2:
for i in generator.fake_data():
    print(i)
29/3:
for i in generator.fake_data():
    print(i)
30/1: import generator
30/2: x = generator.fake_data()
30/3:
for i in x:
    print(i)
30/4:
for i in x:
    print(i)
31/1: x = generator.fake_data()
31/2: import generator
31/3: x = generator.fake_data()
31/4: x
31/5:
for i in x: 
    print(i)
32/1: import boto3
32/2: client = boto3.client('iot-data')
32/3: import json
32/4: r = client.publish(topic='test', payload=json.dumps({"liam" : "keeley"}))
32/5: r
33/1: import generator
33/2:
for i in range(0,10):
    print(generator.fake_data())
34/1: import generator
34/2:
for i in generator.fake_data(10):
    print(i)
35/1: from generator import fake_data
36/1: import topic_subscriber
36/2: publish_data(5, "test")
36/3: topic_subscriber.publish_data(5, "test")
37/1: from topic_subscriber import publish_data
37/2: publish_data(5, "test")
38/1: from topic_subscriber import publish_data
38/2:  publish_data(5, "test")
38/3:  publish_data(5, "stream/test1")
38/4:  publish_data(5, "stream/test1")
38/5:  publish_data(5, "stream/test1")
38/6:  publish_data(5, "stream/test1")
39/1: import topic_subscriber
39/2: ls
39/3: topic_subscriber.publish_data(5, "stream/test")
39/4: topic_subscriber.publish_data(5, "stream/test")
39/5: topic_subscriber.publish_data(5, "stream/test")
39/6: topic_subscriber.publish_data(5, "stream/test")
40/1: from topic_subscriber import publish_data
40/2: publish_data(5, 'stream/test')
40/3: publish_data(5, 'stream/test')
41/1: from topic_subscriber import publish_data
41/2: publish_data(5, 'stream/test')
41/3: publish_data(5, 'stream/test')
42/1: ls
42/2: cd cellwing-esp32
42/3: ls
42/4: cd internet-control
42/5: ls
42/6: cd FakeDataGenerator
42/7: ls
42/8: import topic_subscriber
42/9: topic_subscriber.publish(5, 'stream/test')
42/10: topic_subscriber.publish_data(5, 'stream/test')
43/1: import math
43/2: math.pi
43/3: import boto3
43/4: client = boto3.client('iot-data')
43/5: client.publish(topic='test', payload=json.dumps({"device_id" : 0, "voltage" : math.pi, "strain" : math.pi, "battery_current" : math.pi, "motor_current" : math.pi, "motor_direction" : True, "motor_running" : True}))
43/6: import json
43/7: client.publish(topic='test', payload=json.dumps({"device_id" : 0, "voltage" : math.pi, "strain" : math.pi, "battery_current" : math.pi, "motor_current" : math.pi, "motor_direction" : True, "motor_running" : True}))
43/8: client.publish(topic='test', payload=json.dumps({"device_id" : 0, "voltage" : math.pi, "strain" : math.pi, "battery_current" : math.pi, "motor_current" : math.pi, "motor_direction" : True, "motor_running" : True}))
43/9: client.publish(topic='test', payload=json.dumps({"device_id" : 0, "voltage" : math.pi, "strain" : math.pi, "battery_current" : math.pi, "motor_current" : math.pi, "motor_direction" : True, "motor_running" : True}))
57/1: import boto3
57/2: ls
57/3: cd FakeDataGenerator
57/4: ls
57/5: open Topic_Subscriber.py
58/1: import boto3.client
58/2: import boto3
58/3: client = boto3.client('iot-data')
58/4: payload = {'actuator' : 1, 'end_position' : 0, 'device_id' : 0, 'max_run_time' : 5000, 'duty' : 0, 'displacement' : 0}
58/5: payload
58/6: topic = 'v0-1_board/sub'
58/7: client.publish(topic=topic, payload=payload)
58/8: import json
58/9: client.publish(topic=topic, payload=json.dumps(payload))
58/10: endpoint = 'test'
58/11: client.publish(topic=topic, payload=json.dumps(payload))
58/12: cd ../
58/13: ls
58/14: cd FakeDataGenerator
58/15: ls
58/16: from topic_subscriber import publish_data
58/17: ls
58/18: publish_data(2, 'test')
58/19: client.publish(topic=topic, payload=json.dumps(payload))
58/20: topic
58/21: client.publish(topic=topic, payload=json.dumps(payload))
58/22: client.publish(topic=topic, payload=json.dumps(payload))
58/23: client.publish(topic=topic, payload=json.dumps(payload))
58/24: payload
58/25: payload['duty'] = 0.2
58/26: client.publish(topic=topic, payload=json.dumps(payload))
58/27: payload['end_position'] = 3
58/28: payload
58/29: client.publish(topic=topic, payload=json.dumps(payload))
58/30: client.publish(topic=topic, payload=json.dumps(payload))
58/31: client.publish(topic=topic, payload=json.dumps(payload))
70/1: s = open('SW_EpisodeIV.txt')
70/2: s
70/3: text = s.read()
70/4: text
70/5: s
70/6: t = s.read_lines()
70/7: t = s.readlines()
70/8: t
70/9: t
70/10: s = open('SW_EpisodeIV.txt')
70/11: s
70/12: t = s.readlines()
70/13: t
70/14: import re
70/15: t
70/16: text
70/17: text = re.sub('[^A-ZÜÖÄa-z0-9]+', '', text)
70/18: text
70/19: s = open('SW_EpisodeIV.txt')
70/20: text = s.read()
70/21: text = re.sub('[^A-ZÜÖÄa-z0-9]+', ' ', text)
70/22: text
70/23: t = ''
70/24:
for i in text:
    t.append(i.lower())
70/25:
for i in text:
    t = t + i.lower()
70/26: t
70/27: text
70/28: text = re.sub(r'[0-9]+', '',text)
70/29: text
70/30: lower = ''
70/31:
for i in text.split():
    lower = lower + i.lower() + ' '
70/32: lower
70/33: s = open('SW_EpisodeIV.txt', 'w')
70/34: s.write(lower)
70/35: s.close()
70/36: ls
75/1:
import requests
import numpy as np
import matplotlib.pyplot as plt
75/2:
from astroquery.simbad import Simbad
import numpy as np
import matplotlib.pyplot as plt
75/3:
from astroquery.simbad import Simbad
import numpy as np
import matplotlib.pyplot as plt
75/4:
coord = SkyCoord(ra=280, dec=-60, unit=(u.degree, u.degree), frame='icrs')
width = u.Quantity(0.1, u.deg)
height = u.Quantity(0.1, u.deg)
r = Gaia.query_object_async(coordinate=coord, width=width, height=height)

r.pprint()
75/5:
from astroquery.gaia import Gaia
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
import matplotlib.pyplot as plt
75/6:
coord = SkyCoord(ra=280, dec=-60, unit=(u.degree, u.degree), frame='icrs')
width = u.Quantity(0.1, u.deg)
height = u.Quantity(0.1, u.deg)
r = Gaia.query_object_async(coordinate=coord, width=width, height=height)

r.pprint()
75/7:
coord = SkyCoord(ra=280, dec=-60, unit=(u.degree, u.degree), frame='icrs')
width = u.Quantity(0.1, u.deg)
height = u.Quantity(0.1, u.deg)
r = Gaia.query_object_async(coordinate=coord, width=width, height=height)
75/8: r
75/9: type(r)
75/10: r.columns
75/11: r['bp_rp']
75/12: np.array(r['bp_rp'])
75/13: bp_rp = np.array(r['bp_rp'])
75/14:
bp_rp = np.array(r['bp_rp'])
parallax = np.array(r['parallax'])
75/15: parallax
75/16:
parallax

dist = np.array()
for i in parallax:
    dist.append(1/i)
75/17:
parallax

dist = np.array([])
for i in parallax:
    dist.append(1/i)
75/18:
parallax

dist = np.array([])
for i in parallax:
    np.append(dist, 1/i)
75/19: dist
75/20:
parallax

dist = np.array([])
for i in parallax:
    dist = np.append(dist, 1/i)
75/21: dist
75/22:
parallax

dist = np.array([])
for i in parallax:
    dist = np.append(dist, math.abs(1/i))
75/23:
from astroquery.gaia import Gaia
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
import matplotlib.pyplot as plt
import math
75/24:
coord = SkyCoord(ra=280, dec=-60, unit=(u.degree, u.degree), frame='icrs')
width = u.Quantity(0.1, u.deg)
height = u.Quantity(0.1, u.deg)
r = Gaia.query_object_async(coordinate=coord, width=width, height=height)
75/25: r.columns
75/26:
bp_rp = np.array(r['bp_rp'])
parallax = np.array(r['parallax'])
75/27:
parallax

dist = np.array([])
for i in parallax:
    dist = np.append(dist, math.abs(1/i))
75/28:
parallax

dist = np.array([])
for i in parallax:
    dist = np.append(dist, abs(1/i))
75/29: dist
75/30:
from astroquery.gaia import Gaia
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
import matplotlib.pyplot as plt
import math
75/31:
coord = SkyCoord(ra=250, dec=-80, unit=(u.degree, u.degree), frame='icrs')
width = u.Quantity(360, u.deg)
height = u.Quantity(360, u.deg)
r = Gaia.query_object_async(coordinate=coord, width=width, height=height)
75/32:
coord = SkyCoord(ra=250, dec=-80, unit=(u.degree, u.degree), frame='icrs')
width = u.Quantity(0.1, u.deg)
height = u.Quantity(0.1, u.deg)
r = Gaia.query_object_async(coordinate=coord, width=width, height=height)
75/33: r.columns
75/34:
bp_rp = np.array(r['bp_rp'])
parallax = np.array(r['parallax'])
75/35:
parallax

dist = np.array([])
for i in parallax:
    dist = np.append(dist, abs(1/i))
75/36: dist
75/37:
bp_rp = np.array(r['bp_rp'])
parallax = np.array(r['parallax'])
gaia_g = np.array(r['phot_g_mean_mag'])
75/38:
parallax

dist = np.array([])
for i in parallax:
    dist = np.append(dist, abs(1/i))
75/39: gaia_g
75/40:
bp_rp = np.array(r['bp_rp'])
parallax = np.array(r['parallax'])
gaia_g = np.array(r['lum_val'])
75/41:
parallax

dist = np.array([])
for i in parallax:
    dist = np.append(dist, abs(1/i))
75/42: gaia_g
75/43:
bp_rp = np.array(r['bp_rp'])
parallax = np.array(r['parallax'])
gaia_g = np.array(r['phot_g_mean_mag'])
75/44:
parallax

dist = np.array([])
for i in parallax:
    dist = np.append(dist, abs(1/i))
75/45:
bp_rp = np.array(r['bp_rp'])
parallax = np.array(r['parallax'])
gaia_g = np.array(r['phot_g_mean_mag'])
lum = np.array(r['lum_val'])
75/46:
parallax

dist = np.array([])
for i in parallax:
    dist = np.append(dist, abs(1/i))
75/47:
luminosity = np.array([])

for i in range(len(gaia_g)):
    luminosity = luminosity.append((4*math.pi*dist[i]*dist[i]*gaia_g)/3.86*10e26)
75/48:
luminosity = np.array([])

for i in range(len(gaia_g)):
    luminosity = np.append(luminosity, (4*math.pi*dist[i]*dist[i]*gaia_g)/3.86*10e26)
75/49: luminosity
75/50:
luminosity = np.array([])

for i in range(len(gaia_g)):
    luminosity = np.append(luminosity, (4*math.pi*dist[i]*dist[i]*gaia_g)/(3.86*10e26))
75/51: luminosity
75/52: plt.scatter(bp_rp, gaia_g)
75/53: bp_rp
75/54:
from astroquery.gaia import Gaia
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
import matplotlib.pyplot as plt
import math
75/55: Gaia.ROW_LIMIT = 100
75/56:
coord = SkyCoord(ra=250, dec=-80, unit=(u.degree, u.degree), frame='icrs')
width = u.Quantity(0.4, u.deg)
height = u.Quantity(0.4, u.deg)
r = Gaia.query_object_async(coordinate=coord, width=width, height=height)
75/57: r.columns
75/58:
bp_rp = np.array(r['bp_rp'])
parallax = np.array(r['parallax'])
gaia_g = np.array(r['phot_g_mean_mag'])
lum = np.array(r['lum_val'])
75/59:
parallax

dist = np.array([])
for i in parallax:
    dist = np.append(dist, abs(1/i))
75/60: plt.scatter(bp_rp, gaia_g)
75/61: bp_rp
75/62:
job = Gaia.launch_job("select top 100 "
                      "solution_id,ref_epoch,ra_dec_corr,astrometric_n_obs_al, "
                      "matched_observations,duplicated_source,phot_variable_flag "
                      "from gaiadr2.gaia_source order by source_id")
75/63: job
75/64: r = job.get_results()
75/65: r
75/66:
job = Gaia.launch_job('''select top 100
                      parallax,phot_g_mean_flux,phot_g_mean_mag,phot_bp_mean_flux, 
                      phot_bp_mean_mag,phot_rp_mean_flux, phot_rp_mean_mag, bp_rp
                      from gaiadr2.gaia_source order by source_id''')
75/67: r = job.get_results()
75/68: r
75/69:
job = Gaia.launch_job('''select top 100
                      parallax,phot_g_mean_flux,phot_g_mean_mag,phot_bp_mean_flux, 
                      phot_bp_mean_mag,phot_rp_mean_flux, phot_rp_mean_mag, bp_rp
                      from gaiadr2.gaia_source order by parallax''')
75/70: r = job.get_results()
75/71: r
75/72:
job = Gaia.launch_job('''SELECT TOP 100
                      parallax,phot_g_mean_flux,phot_g_mean_mag,phot_bp_mean_flux, 
                      phot_bp_mean_mag,phot_rp_mean_flux, phot_rp_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source order by parallax''')
75/73: r = job.get_results()
75/74: r
75/75:
job = Gaia.launch_job('''SELECT TOP 100
                      parallax,phot_g_mean_flux,phot_g_mean_mag,phot_bp_mean_flux, 
                      phot_bp_mean_mag,phot_rp_mean_flux, phot_rp_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source''')
75/76: r = job.get_results()
75/77: r
75/78:
job = Gaia.launch_job('''SELECT TOP 100
                      parallax,phot_g_mean_flux,phot_g_mean_mag,phot_bp_mean_flux, 
                      phot_bp_mean_mag,phot_rp_mean_flux, phot_rp_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) < 1''')
75/79: r = job.get_results()
75/80: r
75/81:
bp_rp = np.array(r['bp_rp'])
parallax = np.array(r['parallax'])
gaia_g = np.array(r['phot_g_mean_mag'])
lum = np.array(r['lum_val'])
75/82:
bp_rp = np.array(r['bp_rp'])
parallax = np.array(r['parallax'])
gaia_g = np.array(r['phot_g_mean_mag'])
75/83:
parallax

dist = np.array([])
for i in parallax:
    dist = np.append(dist, abs(1/i))
75/84: plt.scatter(bp_rp, gaia_g)
75/85: bp_rp
75/86:
job = Gaia.launch_job('''SELECT TOP 100
                      parallax,phot_g_mean_flux,phot_g_mean_mag,phot_bp_mean_flux, 
                      phot_bp_mean_mag,phot_rp_mean_flux, phot_rp_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) < 1 AND phot_g_mean_mag > 14''')
75/87: r = job.get_results()
75/88: r
75/89:
from astroquery.gaia import Gaia
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np
import matplotlib.pyplot as plt
import math
75/90:
job = Gaia.launch_job('''SELECT TOP 100
                      parallax,phot_g_mean_flux,phot_g_mean_mag,phot_bp_mean_flux, 
                      phot_bp_mean_mag,phot_rp_mean_flux, phot_rp_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) < 1 AND phot_g_mean_mag > 14''')
75/91: r = job.get_results()
75/92: r
75/93:
job = Gaia.launch_job('''SELECT TOP 100
                      parallax,phot_g_mean_flux,phot_g_mean_mag,phot_bp_mean_flux, 
                      phot_bp_mean_mag,phot_rp_mean_flux, phot_rp_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) < 20 AND phot_g_mean_mag > 14''')
75/94: r = job.get_results()
75/95: r
75/96:
job = Gaia.launch_job('''SELECT TOP 100
                      parallax,phot_g_mean_flux,phot_g_mean_mag,phot_bp_mean_flux, 
                      phot_bp_mean_mag,phot_rp_mean_flux, phot_rp_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) < 0.20 AND phot_g_mean_mag > 14''')
75/97: r = job.get_results()
75/98: r
75/99:
bp_rp = np.array(r['bp_rp'])
parallax = np.array(r['parallax'])
gaia_g = np.array(r['phot_g_mean_mag'])
75/100:
parallax

dist = np.array([])
for i in parallax:
    dist = np.append(dist, abs(1/i))
75/101: plt.scatter(bp_rp, gaia_g)
75/102: bp_rp
75/103:
job = Gaia.launch_job('''SELECT TOP 100
                      parallax,phot_g_mean_flux,phot_g_mean_mag,phot_bp_mean_flux, 
                      phot_bp_mean_mag,phot_rp_mean_flux, phot_rp_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND phot_g_mean_mag > 14''')
75/104: r = job.get_results()
75/105: r
75/106:
bp_rp = np.array(r['bp_rp'])
parallax = np.array(r['parallax'])
gaia_g = np.array(r['phot_g_mean_mag'])
75/107:
parallax

dist = np.array([])
for i in parallax:
    dist = np.append(dist, abs(1/i))
75/108: plt.scatter(bp_rp, gaia_g)
75/109: bp_rp
75/110:
job = Gaia.launch_job('''SELECT TOP 100 phot_g_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND phot_g_mean_mag < 14''')
75/111: r = job.get_results()
75/112: r
75/113:
bp_rp = np.array(r['bp_rp']
gaia_g = np.array(r['phot_g_mean_mag'])
75/114:
bp_rp = np.array(r['bp_rp']
gaia_g = np.array(r['phot_g_mean_mag'])
75/115:
bp_rp = np.array(r['bp_rp'])
gaia_g = np.array(r['phot_g_mean_mag'])
75/116:
parallax

dist = np.array([])
for i in parallax:
    dist = np.append(dist, abs(1/i))
75/117: plt.scatter(bp_rp, gaia_g)
75/118:
job = Gaia.launch_job('''SELECT TOP 100 phot_g_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND phot_g_mean_mag > 14''')
75/119: r = job.get_results()
75/120: r
75/121:
bp_rp = np.array(r['bp_rp'])
gaia_g = np.array(r['phot_g_mean_mag'])
75/122: plt.scatter(bp_rp, gaia_g)
75/123: plt.scatter(r['bp_rp'], r['phot_g_mean_mag'])
75/124:
plt.scatter(r['bp_rp'], r['phot_g_mean_mag'])
plt.gca().invert_yaxis()
75/125:
plt.scatter(r['bp_rp'], r['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp')
75/126:
plt.scatter(r['bp_rp'], r['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp')
plt.ylabel('Absolute Gaia G')
75/127:
plt.style('ggplot')
plt.scatter(r['bp_rp'], r['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp')
plt.ylabel('Absolute Gaia G')
75/128:
plt.style.use('ggplot')
plt.scatter(r['bp_rp'], r['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp')
plt.ylabel('Absolute Gaia G')
75/129:
job = Gaia.launch_job('''SELECT TOP 10 phot_g_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND phot_g_mean_mag > 14''')
75/130:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
75/131:
job = Gaia.launch_job('''SELECT TOP 10 phot_g_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND phot_g_mean_mag > 14''')
75/132: table = job.get_results()
75/133:
plt.style.use('ggplot')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.save('color_diagram.png')
plt.show()
75/134:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
75/135:
job = Gaia.launch_job('''SELECT TOP 10 phot_g_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND phot_g_mean_mag > 14''')
75/136: table = job.get_results()
75/137:
plt.style.use('ggplot')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.savefig('color_diagram.png')
plt.show()
75/138: plt.style.available
75/139:
plt.style.use('Solarize_Light2')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/140:
plt.style.use('classic')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/141:
plt.style.use('fast')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/142:
plt.style.use('fast')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/143:
plt.style.use('seaborn')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/144:
plt.style.use('seaborn-muted')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/145:
plt.style.use('seaborn-white')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/146:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
75/147:
job = Gaia.launch_job('''SELECT phot_g_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND phot_g_mean_mag > 14''')
75/148: table = job.get_results()
75/149:
plt.style.use('seaborn-white')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/150:
plt.style.use('seaborn-white')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram–All Stars Within 50 Parsecs of Sun, Down to Magnitude 14')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/151:
plt.style.use('seaborn-white')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/152:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
75/153:
job = Gaia.launch_job('''SELECT phot_g_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND phot_g_mean_mag < 14''')
75/154: table = job.get_results()
75/155:
plt.style.use('seaborn-white')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/156:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
75/157:
job = Gaia.launch_job('''SELECT phot_g_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND phot_g_mean_mag > 14''')
75/158: table = job.get_results()
75/159:
plt.style.use('seaborn-white')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'])
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/160:
plt.style.use('seaborn-white')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'], color='black')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/161:
plt.style.use('seaborn-white')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'], color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/162:
plt.style.use('seaborn-white')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'], color='black', marker='*')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/163:
plt.style.use('seaborn-white')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'], color='black', marker='˘')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/164:
plt.style.use('seaborn-white')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'], color='black', marker='x')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/165:
plt.style.use('seaborn-white')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'], color='black', marker=',')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/166:
plt.style.use('seaborn-white')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'], color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/167:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
75/168:
job = Gaia.launch_job('''SELECT phot_g_mean_mag, bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND phot_g_mean_mag > 14''')
75/169: table = job.get_results()
75/170:
plt.style.use('seaborn-white')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'], color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/171:
bp_rp = np.array(table['bp_rp'])
a_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([1/i for i in parallax])
75/172:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/173:
job = Gaia.launch_job('''SELECT TOP 10 phot_g_mean_mag, bp_rp, parallax
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND phot_g_mean_mag > 14''')
75/174: table = job.get_results()
75/175:
bp_rp = np.array(table['bp_rp'])
a_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([1/i for i in parallax])
75/176:
plt.style.use('seaborn-white')
plt.scatter(table['bp_rp'], table['phot_g_mean_mag'], color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/177: distance
75/178:
bp_rp = np.array(table['bp_rp'])
a_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/i) for i in parallax])
75/179: distance
75/180:
bp_rp = np.array(table['bp_rp'])
a_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/(i/1000)) for i in parallax])
75/181: distance
75/182:
bp_rp = np.array(table['bp_rp'])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/(i/1000)) for i in parallax])
ab_mag = np.array([ap_mag[i] - 2.5*math.log((distance[i]/10)**2)])
75/183:
bp_rp = np.array(table['bp_rp'])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/(i/1000)) for i in parallax])
ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
75/184: ab_mag
75/185:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/186:
job = Gaia.launch_job('''SELECT TOP 10 phot_g_mean_mag, bp_rp, parallax
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND phot_g_mean_mag > 14''')
75/187: table = job.get_results()
75/188:
bp_rp = np.array(table['bp_rp'])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/(i/1000)) for i in parallax])
ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
75/189: ab_mag
75/190:
plt.style.use('seaborn-white')
plt.scatter(br_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/191:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/192:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/193:
job = Gaia.launch_job('''SELECT TOP 10 phot_g_mean_mag, bp_rp, parallax
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND phot_g_mean_mag > 14''')
75/194: table = job.get_results()
75/195:
bp_rp = np.array(table['bp_rp'])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/(i/1000)) for i in parallax])
ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
75/196:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/197:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/198:
job = Gaia.launch_job('''SELECT phot_g_mean_mag, bp_rp, parallax
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND phot_g_mean_mag > 14''')
75/199: table = job.get_results()
75/200:
bp_rp = np.array(table['bp_rp'])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/(i/1000)) for i in parallax])
ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
75/201:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/202:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/203:
job = Gaia.launch_job('''SELECT phot_g_mean_mag, bp_rp, parallax
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      phot_g_mean_mag - 2.5*LOG(SQUARE((1/parallax)*1000)) > 14''')
75/204:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/205:
job = Gaia.launch_job('''SELECT phot_g_mean_mag, bp_rp, parallax
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      phot_g_mean_mag - 2.5*LOG(((1/parallax)*1000)*((1/parallax)*1000)) > 14''')
75/206:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/207:
job = Gaia.launch_job('''SELECT TOP 10 phot_g_mean_mag, bp_rp, parallax
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      phot_g_mean_mag - 2.5*LOG(((1/parallax)*1000)*((1/parallax)*1000)) > 14''')
75/208: table = job.get_results()
75/209:
bp_rp = np.array(table['bp_rp'])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/i)*1000 for i in parallax])
ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
75/210:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/211:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/212:
job = Gaia.launch_job('''SELECT TOP 10 phot_g_mean_mag, bp_rp, parallax
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG((((1/parallax)*1000)*((1/parallax)*1000)))/(10*10)) > 14''')
75/213: table = job.get_results()
75/214:
bp_rp = np.array(table['bp_rp'])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/i)*1000 for i in parallax])
ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
75/215:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/216:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/217:
job = Gaia.launch_job('''SELECT phot_g_mean_mag, bp_rp, parallax
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG((((1/parallax)*1000)*((1/parallax)*1000)))/(10*10)) > 14''')
75/218: table = job.get_results()
75/219:
bp_rp = np.array(table['bp_rp'])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/i)*1000 for i in parallax])
ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
75/220:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/221:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/222:
job = Gaia.launch_job('''SELECT phot_g_mean_mag, bp_rp, parallax
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG((((1/parallax)*1000)*((1/parallax)*1000)))/(10*10)) > 14''')
75/223: table = job.get_results()
75/224: table
75/225:
bp_rp = np.array(table['bp_rp'])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/i)*1000 for i in parallax])
ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
75/226:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/227:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/228:
job = Gaia.launch_job('''SELECT phot_g_mean_mag, bp_rp, parallax
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG10(POWER(((1/parallax)*1000)/10, 2))) >= 14''')
75/229: table = job.get_results()
75/230: table
75/231:
bp_rp = np.array(table['bp_rp'])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/i)*1000 for i in parallax])
ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
75/232:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/233: print(job)
75/234:
bp_rp = np.array([table['bp_rp']])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/i)*1000 for i in parallax])
ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_bp_rp = np.array(([bp_rp[i] - 2.5*math.log((distance[i]/10)**2)]) for i in range(len(bp_rp)))
75/235:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/236:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/237:
job = Gaia.launch_job('''SELECT phot_g_mean_mag, bp_rp, parallax
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/238: table = job.get_results()
75/239: print(job)
75/240:
bp_rp = np.array([table['bp_rp']])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/i)*1000 for i in parallax])
ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_bp_rp = np.array(([bp_rp[i] - 2.5*math.log((distance[i]/10)**2)]) for i in range(len(bp_rp)))
75/241:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/242:
plt.style.use('seaborn-white')
plt.scatter(ab_bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/243:
bp_rp = np.array([table['bp_rp']])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/i)*1000 for i in parallax])
ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_bp_rp = np.array([([bp_rp[i] - 2.5*math.log((distance[i]/10)**2)]) for i in range(len(bp_rp))])
75/244:
plt.style.use('seaborn-white')
plt.scatter(ab_bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/245:
bp_rp = np.array([table['bp_rp']])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/i)*1000 for i in parallax])
ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
75/246:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/247:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/248:
job = Gaia.launch_job('''SELECT (phot_g_mean_mag-2.5*LOG10(POWER(((1/parallax)*1000)/10), 2)) AS Absolute_Magnitude,
                        bp_rp, parallax
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/249:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/250:
job = Gaia.launch_job('''SELECT phot_g_mean_mag-2.5*LOG10(POWER(((1/parallax)*1000)/10), 2) AS Absolute_Magnitude,
                        bp_rp, parallax
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/251:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/252:
job = Gaia.launch_job('''SELECT phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS Absolute_Magnitude,
                        bp_rp, parallax
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/253: table = job.get_results()
75/254: table
75/255:
bp_rp = np.array([table['bp_rp']])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

distance = np.array([abs(1/i)*1000 for i in parallax])
ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
75/256:
bp_rp = np.array([table['bp_rp']])
ap_mag = np.array(table['phot_g_mean_mag'])
parallax = np.array(table['parallax'])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/257:
bp_rp = np.array([table['bp_rp']])
parallax = np.array(table['parallax'])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/258:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/259:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/260:
job = Gaia.launch_job('''SELECT TOP 3000 phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude,
                        bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/261: table = job.get_results()
75/262: table
75/263:
bp_rp = np.array([table['bp_rp']])
parallax = np.array(table['parallax'])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/264:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/265:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/266:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/267:
job = Gaia.launch_job('''SELECT TOP 10000 phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude,
                        bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/268:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/269:
job = Gaia.launch_job('''SELECT ALL phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude,
                        bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/270: table = job.get_results()
75/271: table
75/272:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/273:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/274:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/275:
job = Gaia.launch_job('''SELECT TOP 5000 phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude,
                        bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/276:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/277:
job = Gaia.launch_job('''SELECT TOP 10 phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude,
                        bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/278: table = job.get_results()
75/279: table
75/280:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/281:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/282:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/283:
job = Gaia.launch_job('''SELECT TOP 4000 phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude,
                        bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/284:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/285:
job = Gaia.launch_job('''SELECT TOP 3500 phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude,
                        bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/286:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/287:
job = Gaia.launch_job('''SELECT TOP 3500 phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude,
                        bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/288:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/289:
job = Gaia.launch_job('''SELECT TOP 3200 phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude,
                        bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/290: table = job.get_results()
75/291: table
75/292:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/293:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/294:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/295:
job = Gaia.launch_job('''SELECT TOP * phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude,
                        bp_rp
                      FROM gaiadr2.gaia_source 
                      WHERE ABS(parallax) > 20 AND 
                      (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/296:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/297:
job = Gaia.launch_job('''SELECT TOP 
                            SELECT COUNT * FROM gaiadr2.gaia_source WHERE ABS(parallax) > 20 AND 
                            (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/298:
count = Gaia.launch_job('''SELECT COUNT(*) FROM gaiadr2 WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
print(count.get_results)
75/299:
count = Gaia.launch_job('''SELECT COUNT(*) FROM gaiadr2.gaia_source WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
print(count.get_results)
75/300:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/301:
job = Gaia.launch_job('''SELECT TOP 3257
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/302:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/303:
job = Gaia.launch_job('''SELECT TOP 3225
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/304:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/305:
job = Gaia.launch_job('''SELECT TOP 3215
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/306: table = job.get_results()
75/307: table
75/308:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/309:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/310:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/311:
job = Gaia.launch_job('''SELECT TOP 3220
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/312: table = job.get_results()
75/313: table
75/314:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/315:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/316:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/317:
job = Gaia.launch_job('''SELECT TOP 3223
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/318: table = job.get_results()
75/319: table
75/320:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/321:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/322:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/323:
job = Gaia.launch_job('''SELECT TOP 3224
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/324: table = job.get_results()
75/325: table
75/326:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/327:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/328:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/329:
job = Gaia.launch_job('''SELECT TOP 3225
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/330: table = job.get_results()
75/331: table
75/332:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/333:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/334:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/335:
job = Gaia.launch_job('''SELECT TOP 4000
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/336:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/337:
job = Gaia.launch_job('''SELECT TOP 3500
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/338: table = job.get_results()
75/339: table
75/340:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/341:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/342:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/343:
job = Gaia.launch_job('''SELECT TOP 3750
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/344:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/345:
job = Gaia.launch_job('''SELECT TOP 3625
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/346: table = job.get_results()
75/347: table
75/348:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/349:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/350:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/351:
job = Gaia.launch_job('''SELECT TOP 3700
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/352:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/353:
job = Gaia.launch_job('''SELECT TOP 3666
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/354: table = job.get_results()
75/355: table
75/356:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/357:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/358:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/359:
job = Gaia.launch_job('''SELECT TOP 3675
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/360: table = job.get_results()
75/361: table
75/362:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/363:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/364:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/365:
job = Gaia.launch_job('''SELECT TOP 3690
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/366: table = job.get_results()
75/367: table
75/368:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/369:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/370:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/371:
job = Gaia.launch_job('''SELECT TOP 3695
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/372: table = job.get_results()
75/373: table
75/374:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/375:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/376:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/377:
job = Gaia.launch_job('''SELECT TOP 3697
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/378: table = job.get_results()
75/379: table
75/380:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/381:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/382:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/383:
job = Gaia.launch_job('''SELECT TOP 3699
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/384: table = job.get_results()
75/385: table
75/386:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/387:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/388:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/389:
job = Gaia.launch_job('''SELECT TOP 3700
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/390: table = job.get_results()
75/391: table
75/392:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/393:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/394:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/395:
job = Gaia.launch_job('''SELECT TOP 3750
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/396: table = job.get_results()
75/397: table
75/398:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/399:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/400:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/401:
job = Gaia.launch_job('''SELECT TOP 3800
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/402: table = job.get_results()
75/403: table
75/404:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/405:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/406:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/407:
job = Gaia.launch_job('''SELECT TOP 3900
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/408: table = job.get_results()
75/409: table
75/410:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/411:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/412:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/413:
job = Gaia.launch_job('''SELECT TOP 4000
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/414: table = job.get_results()
75/415: table
75/416:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/417:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/418:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/419:
job = Gaia.launch_job('''SELECT TOP 5000
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/420:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/421:
job = Gaia.launch_job('''SELECT TOP 4000
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/422: table = job.get_results()
75/423: table
75/424:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/425:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/426:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/427:
job = Gaia.launch_job('''SELECT TOP 10000
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/428: table = job.get_results()
75/429: table
75/430:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/431:
job = Gaia.launch_job('''SELECT TOP 4500
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/432:
i = 0
for i in range(5000):
    query = f'''SELECT TOP 1
               phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               FROM gaiadr2.gaia_source 
               WHERE ABS(parallax) > 20 AND 
               (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               OFFSET {i}'''
    try:
        gaia.launch_job(query)
    except ValueError:
        print(i)
        break
75/433:
i = 0
for i in range(5000):
    query = f'''SELECT TOP 1
               phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               FROM gaiadr2.gaia_source 
               WHERE ABS(parallax) > 20 AND 
               (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               OFFSET {i}'''
    try:
        Gaia.launch_job(query)
    except ValueError:
        print(i)
        break
75/434:
i = 0
for i in range(4000, 5000):
    query = f'''SELECT TOP 1
               phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               FROM gaiadr2.gaia_source 
               WHERE ABS(parallax) > 20 AND 
               (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               OFFSET {i}'''
    try:
        Gaia.launch_job(query)
    except ValueError:
        print(i)
        break
75/435:
i = 0
for i in range(4000, 5000):
    print(i)
    query = f'''SELECT TOP 1
               phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               FROM gaiadr2.gaia_source 
               WHERE ABS(parallax) > 20 AND 
               (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               OFFSET {i}'''
    try:
        Gaia.launch_job(query)
    except ValueError:
        print("last index")
        print(i)
        break
75/436:
i = 0
for i in range(4000, 5000):
    print(i)
    query = f'''SELECT TOP 1
               phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               FROM gaiadr2.gaia_source 
               WHERE ABS(parallax) > 20 AND 
               (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               OFFSET {i}'''
    try:
        Gaia.launch_job(query)
        continue
    except ValueError:
        print("last index")
        print(i)
        break
75/437:
i = 0
for i in range(4000, 5000):
    print(i)
    query = f'''SELECT TOP 1
               phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               FROM gaiadr2.gaia_source 
               WHERE ABS(parallax) > 20 AND 
               (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               OFFSET {i}'''
    try:
        j = Gaia.launch_job(query)
        Gaia.remove_jobs(j)
    except ValueError:
        print("last index")
        print(i)
        break
75/438:
'''i = 0
for i in range(4000, 5000):
    print(i)
    query = f'''SELECT TOP 1
               phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               FROM gaiadr2.gaia_source 
               WHERE ABS(parallax) > 20 AND 
               (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               OFFSET {i}'''
    try:
        j = Gaia.launch_job(query)
        Gaia.remove_jobs(j)
    except ValueError:
        print("last index")
        print(i)
        break'''
75/439:
job = Gaia.launch_job('''SELECT TOP 10
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, (bp_rp-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) AS bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/440: table = job.get_results()
75/441: table
75/442:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/443:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/444:
job = Gaia.launch_job('''SELECT TOP 10
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/445: table = job.get_results()
75/446: table
75/447:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/448:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/449:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/450:
'''i = 0
for i in range(4000, 5000):
    print(i)
    query = f'''SELECT TOP 1
               phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               FROM gaiadr2.gaia_source 
               WHERE ABS(parallax) > 20 AND 
               (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               OFFSET {i}'''
    try:
        j = Gaia.launch_job(query)
        Gaia.remove_jobs(j)
    except ValueError:
        print("last index")
        print(i)
        break'''
75/451:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/452:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/453:
job = Gaia.launch_job('''SELECT TOP 4200
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/454:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/455:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/456:
job = Gaia.launch_job('''SELECT TOP 4000
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/457:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/458:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/459:
job = Gaia.launch_job('''SELECT TOP 4000
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/460:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/461:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/462:
job = Gaia.launch_job('''SELECT TOP 3000
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/463: table = job.get_results()
75/464: table
75/465:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/466:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/467:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/468:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/469:
job = Gaia.launch_job('''SELECT TOP 4000
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/470:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/471:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/472:
job = Gaia.launch_job('''SELECT TOP 3500
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/473: table = job.get_results()
75/474: table
75/475:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/476:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/477:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/478:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/479:
job = Gaia.launch_job('''SELECT TOP 1
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
                         OFFSET 4000''')
75/480:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/481:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/482:
job = Gaia.launch_job('''SELECT 
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
                         OFFSET 2000''')
75/483:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/484:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/485:
job = Gaia.launch_job('''SELECT 3500
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/486:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/487:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/488:
job = Gaia.launch_job('''SELECT TOP 3500
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/489:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/490:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/491:
job = Gaia.launch_job('''SELECT TOP 3000
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/492: table = job.get_results()
75/493: table
75/494:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/495:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/496:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/497:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/498:
job = Gaia.launch_job('''SELECT TOP 3500
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/499:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/500:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/501:
job = Gaia.launch_job('''SELECT TOP 3100
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/502: table = job.get_results()
75/503: table
75/504:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/505:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/506:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/507:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/508:
job = Gaia.launch_job('''SELECT TOP 3100
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/509: table = job.get_results()
75/510: table
75/511:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/512:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/513:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/514:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/515:
job = Gaia.launch_job('''SELECT TOP 4000
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/516:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/517:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/518:
job = Gaia.launch_job('''SELECT TOP 3000
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/519:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/520:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/521:
job = Gaia.launch_job('''SELECT 
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/522: table = job.get_results()
75/523: table
75/524:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/525:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/526:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/527:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/528:
job = Gaia.launch_job('''SELECT TOP 2900
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/529: table = job.get_results()
75/530: table
75/531:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/532:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/533:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/534:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/535:
job = Gaia.launch_job('''SELECT TOP 4000
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/536: table = job.get_results()
75/537: table
75/538:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/539:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/540:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/541:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/542:
job = Gaia.launch_job('''WITH num_stars AS 
                            (
                             SELECT COUNT(dec) FROM gaiadr2.gaia_source 
                             WHERE ABS(parallax) > 20 AND 
                                 (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
                            )

                         SELECT TOP num_stars
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/543:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/544:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/545:
job = Gaia.launch_job('''SELECT TOP 4000
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/546: table = job.get_results()
75/547: table
75/548:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/549:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/550:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/551:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/552:
job = Gaia.launch_job('''SELECT TOP 10
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
                         OFFSET 4000''')
75/553: table = job.get_results()
75/554: table
75/555:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/556:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/557:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/558:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/559:
job = Gaia.launch_job('''SELECT TOP 10
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
                         OFFSET 6000''')
75/560:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/561:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/562:
job = Gaia.launch_job('''SELECT TOP 4000
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
                         AND random_index between 0 and 9999999''')
75/563:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/564:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/565:
job = Gaia.launch_job('''SELECT TOP 2500
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
                         AND random_index between 0 and 9999999''')
75/566:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/567:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/568:
job = Gaia.launch_job('''SELECT
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
                         AND random_index between 0 and 9999999''')
75/569:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/570:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/571:
job = Gaia.launch_job('''SELECT TOP 10
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
                         AND random_index between 0 and 9999999''')
75/572: table = job.get_results()
75/573: table
75/574:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/575:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/576:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/577:
#i = 0
#for i in range(4000, 5000):
    #print(i)
    #query = f'''SELECT TOP 1
               #phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
               #FROM gaiadr2.gaia_source 
               #WHERE ABS(parallax) > 20 AND 
               #(phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14
               #OFFSET {i}'''
    #try:
        #j = Gaia.launch_job(query)
        #Gaia.remove_jobs(j)
    #except ValueError:
        #print("last index")
        #print(i)
        #break
75/578:
job = Gaia.launch_job_async('''SELECT 
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/579: table = job.get_results()
75/580: table
75/581:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/582:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/583:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/584:
job = Gaia.launch_job_async('''SELECT 
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/585:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/586:
job = Gaia.launch_job_async('''SELECT 
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) >= 14''')
75/587: table = job.get_results()
75/588: table
75/589:
bp_rp = np.array([table['bp_rp']])

#distance = np.array([abs(1/i)*1000 for i in parallax])
#ab_mag = np.array([(ap_mag[i] - 2.5*math.log((distance[i]/10)**2)) for i in range(len(ap_mag))])
ab_mag = np.array(table['absolute_magnitude'])
75/590:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.figure(figsize=(20,10))
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/591:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.figure(figsize=(20,10))
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/592:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/593:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.figure(figsize=(20,15))
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/594:
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.figure(figsize=(30,15))
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/595:
plt.figure(figsize=(30,15))
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/596:
plt.figure(figsize=(20,15))
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/597:
plt.figure(figsize=(20,10))
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/598:
plt.figure(figsize=(25,15))
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/599:
plt.figure(figsize=(25,15))
plt.set_ylim([14])
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/600:
plt.figure(figsize=(25,15))
plt.ylim(14)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/601:
plt.figure(figsize=(25,15))
plt.ylim(14)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/602:
plt.ylim(14)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/603:
plt.ylim(14,26)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/604:
#plt.ylim(14,26)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/605:
#plt.ylim(14.2,28)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/606:
plt.ylim(14.2,28)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/607:
plt.ylim(14.5,28)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/608:
plt.ylim(14,28)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/609:
plt.ylim(13,28)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/610:
plt.ylim(12.5,28)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/611:
plt.ylim(13.5,28)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/612:
plt.ylim(13.5,28)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.figure(figsize=(20,10))
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/613:
plt.ylim(13.5,28)
plt.figure(figsize=(20,10))
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/614:
plt.ylim(13.5,28)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/615:
plt.figure(figsize=(20,10))
plt.ylim(13.5,28)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('color_magnitude_diagram.png')
plt.show()
75/616: pwd
75/617:
plt.figure(figsize=(20,10))
plt.ylim(13.5,28)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('/Users/liamkeeley/Desktop/Colorado_College/Summer_Research_Application/color_magnitude_diagram.pdf')
plt.show()
75/618:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/619:
job = Gaia.launch_job_async('''SELECT 
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, 
                         bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) <= 14''')
75/620:
job = Gaia.launch_job_async('''SELECT TOP 10
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, 
                         bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) <= 14''')
75/621:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/622:
job = Gaia.launch_job_async('''SELECT TOP 10
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, 
                         bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) <= 14''')
75/623: table = job.get_results()
75/624: table
75/625:
bp_rp = np.array([table['bp_rp']])
ab_mag = np.array(table['absolute_magnitude'])
75/626:
plt.figure(figsize=(20,10))
plt.ylim(13.5,28)
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('/Users/liamkeeley/Desktop/Colorado_College/Summer_Research_Application/color_magnitude_diagram.pdf')
plt.show()
75/627: pwd
75/628:
plt.figure(figsize=(20,10))
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('/Users/liamkeeley/Desktop/Colorado_College/Summer_Research_Application/color_magnitude_diagram.pdf')
plt.show()
75/629:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/630:
job = Gaia.launch_job_async('''SELECT TOP 10
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, 
                         bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) <= 14''')
75/631: table = job.get_results()
75/632: table
75/633:
bp_rp = np.array([table['bp_rp']])
ab_mag = np.array(table['absolute_magnitude'])
75/634:
plt.figure(figsize=(20,10))
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('/Users/liamkeeley/Desktop/Colorado_College/Summer_Research_Application/color_magnitude_diagram.pdf')
plt.show()
75/635: pwd
75/636:
from astroquery.gaia import Gaia
import matplotlib.pyplot as plt
import numpy as np
75/637:
job = Gaia.launch_job_async('''SELECT 
                         phot_g_mean_mag-2.5*LOG10(POWER((((1/parallax)*1000)/10), 2)) AS absolute_magnitude, 
                         bp_rp
                         FROM gaiadr2.gaia_source 
                         WHERE ABS(parallax) > 20 AND 
                         (phot_g_mean_mag - 2.5*LOG10(POWER((((1/parallax)*1000)/10), 2))) <= 14''')
75/638: table = job.get_results()
75/639: table
75/640:
bp_rp = np.array([table['bp_rp']])
ab_mag = np.array(table['absolute_magnitude'])
75/641:
plt.figure(figsize=(20,10))
plt.style.use('seaborn-white')
plt.scatter(bp_rp, ab_mag, color='black', marker='.')
plt.gca().invert_yaxis()
plt.xlabel('Bp-Rp [Magnitude]')
plt.ylabel('Absolute Gaia G [Magnitude]')
plt.title('Color Magnitude Diagram')
plt.savefig('/Users/liamkeeley/Desktop/Colorado_College/Summer_Research_Application/color_magnitude_diagram.pdf')
plt.show()
75/642: pwd
76/1: from awsiotsdk import *
76/2: from awsiot import *
76/3: from awsiot import mqtt_connection_builder
77/1: from awsiot import mqtt_connection_builder
118/1: import requests
142/1:
def poly(x):
    return x**2+x+41
143/1:
def poly(n):
    num = 0
    last_digits = []
    while num < n:
        
        
        
        quit()
144/1: results = [n**2+n+41 for n in range(50)]
144/2: results
144/3:
def last_digit(n):
    if
145/1: [(n**2+n+41)%10 for n in range(50)]
145/2: last_digits = list([(n**2+n+41)%10 for n in range(50)])
145/3: last_digits
145/4: clear
145/5: last_digits = lambda n : [(x**2+x+41) for x in range(n)]
145/6: last_digits(10)
145/7: last_digits = lambda n : [(x**2+x+41)%10 for x in range(n)]
145/8: last_digits(10)
145/9: last_digits(50)
145/10: cleae
145/11: clear
145/12: s = lambda n : [[(x^k)%29] for x in range(n) for k in range(n)]
145/13: s(10)
145/14: s = lambda n : [[(x^k)%29+1 for x in range(n)] for k in range(n)]
145/15: s(10)
145/16: s = lambda n : [[(x^k)%28 for x in range(n)] for k in range(n)]
145/17: s(10)
145/18: s = lambda n : [[(x^k)%28 for x in range(1, n)] for k in range(1, n)]
145/19: s(10)
145/20: s = lambda n : [[((x^k)%28+1) for x in range(n)] for k in range(n)]
145/21: s(10)
145/22: 8%28
145/23: 35%28
145/24: 32%28
145/25: 32%29
145/26: s = lambda n : [[((x^k)%29) for x in range(n)] for k in range(n)]
145/27: s(10)
145/28: s = lambda n : [[((x^k)%29) for x in range(1,n)] for k in range(1,n)]
145/29: s(10)
145/30: 1^1
145/31: 2^1
145/32: s = lambda n : [[((x**k)%29) for x in range(1,n)] for k in range(1,n)]
145/33: s(10)
145/34: s(28)
145/35: s(14)
145/36: s(20)
145/37: last_digits
145/38: last_digits(5)
145/39: last_digits(50)
145/40: last_digits(20)
148/1: run hello.py
148/2: pr<tab>
148/3: import scipy.constants as sc
148/4: r = 1e-9
148/5: r
148/6: F = sc.e**2/(4*sc.pi*sc.epsilon_0*r**2)
148/7: F
148/8: from pylab import *
148/9: x = linspace(-4.,4.,100)
148/10: y = x**2
148/11: plot(x,y)
148/12: show()
148/13: x
148/14: type(x)
254/1: import numpy as np
254/2: y = np.array(0,-2*np.pi, 8)
254/3: y = np.array([0,-2*np.pi, 8])
254/4: y
254/5: a = np.array([[5, 5*np.pi, 0], [5*np.pi, 15*np.pi**2/2, -2*np.pi], [0,-2*np.pi, 8]])
254/6: a
254/7: np.linalg.solve(a, y)
255/1: ls
255/2: run q1.py
256/1: run q1.py
257/1:
def e_alg(a,b,steps=0):
    if a%b==0:
        
        
 kjdsfjkl;asd
257/3: ls
257/4: import q1
257/5: import q1
257/6: import numpy as np
257/7: import scipy.constants as sc
257/8: x = [sc.pi*i/2 for i in range(4)]
257/9: x
257/10: y = [np.sin(i) for i in x]
257/11: y
257/12: q1.ls_a_x_sinx(x,y)
257/13: x = [sc.pi*i/2 for i in range(5)]
257/14: y = [np.sin(i) for i in x]
257/15: q1.ls_a_x_sinx(x,y)
257/16: import matplotlib.pyplot as plt
257/17: plt.scatter(x, y)
257/18: y = np.array([b[0] + b[1]*t_array[i] for i in range(len(t_array))])
257/19: b = q1.ls_a_x_sinx(x,y)
257/20: y = [np.sin(i) for i in x]
257/21: y
257/22: y_b = np.linspace(0,b[0]+b[1]*i+b[2]*sin(i),i)
257/23: i = 2*sc.pi
257/24: y_b = np.linspace(0,b[0]+b[1]*i+b[2]*sin(i),i)
257/25: y_b = np.linspace(0,b[0]+b[1]*i+b[2]*np.sin(i),i)
257/26: y_b = np.linspac(0,i)
257/27: y_b = np.linspace(0,i)
257/28: x_b = np.linspace(0,i)
257/29: x_b
257/30: y_b = np.array([b[0]+b[1]*x_n+b[2]*np.sin(x_n) for x_n in x_b])
257/31: y_b
257/32: plt.plot(x_b,y_b)
257/33: plt.show()
258/1: i
258/2: run q1
302/1: sys.maxint
303/1: type(2*2)
303/2: type(2.1*1.1)
303/3: type(3+2j*4+j)
303/4: comp = 3+2j
303/5: type(comp)
303/6: type(comp*comp)
303/7: comp_2 = 3-2j
303/8: type(comp*comp_2)
303/9: comp*comp_2
303/10: type(1*2.1)
303/11: type(1.1*comp)
303/12: type(1*comp)
303/13: import numpy as np
303/14: a1 = np.ones(5)
303/15: a1*5
303/16: a1/5
303/17: a1-5
303/18: a2 = np.logspace(-1,2,10)
303/19: a2
303/20: a1+a2
303/21: a1+a1
303/22: a1.append(a1)
303/23: a1 += a1
303/24: a1
303/25: ls
303/26: cd ProgrammingPythonEssentials
303/27: ls
303/28: cd Examples_and_Data
303/29: ls
303/30: run input_test
303/31: touch e5.py
308/1: import e6
308/2: s(5)
308/3: e6.s(5)
308/4: e6.e(1)
309/1: import e6
309/2: e6.s(5)
309/3: e6.s(10000)
309/4: e6.s(1)
310/1: import e6
310/2: e6.s(1)
310/3: range(1,1)
310/4: print(range(1,1))
310/5: range(1,2)
310/6: i for n in range(1,2)
310/7: i for i in range(1,2)
310/8: print(i) for i in range(1,2)
310/9: [print(i) for i in range(1,2)]
310/10: [print(i) for i in range(1,1)]
310/11: e6.s(2)
311/1: import e6
311/2: e6.s(1)
311/3: e6.s(2)
311/4: [print(e6.s(i)) for i in range(10)]
312/1: import e7
313/1: import e7
314/1: import e7
315/1: import e7
316/1: import e7
317/1: import e7
318/1: import e7
318/2: xy = [2,3]
318/3: e7.xy2rth(**x)
318/4: e7.xy2rth(**xy)
318/5: e7.xy2rth(*xy)
318/6: e7.rth2xy(*xy2rth(*xy))
318/7: e7.rth2xy(*e7.xy2rth(*xy))
318/8: xy = [-1,-1]
318/9: e7.rth2xy(*e7.xy2rth(*xy))
318/10: xy=[-1,1]
318/11: e7.rth2xy(*e7.xy2rth(*xy))
318/12: xy = [0,0]
318/13: e7.rth2xy(*e7.xy2rth(*xy))
326/1: from q2 import fibonacci
326/2: fibonacci(10)
326/3: import numpy as np
326/4: fibonacci(10,np.array([1,3]))
327/1: import q2
327/2: q2.golden_ratio(15)
327/3: q2.golden_ratio(15,a_1=1,a_2=2)
327/4: q2.golden_ratio(15,a_1=1,a_2=3)
327/5: q2.golden_ratio(15,a_1=11,a_2=13)
330/1: import q2
365/1: print('\phi')
365/2: print(f'\phi')
365/3: print(f'\\phi')
365/4: run q2.py
368/1: import numpy as np
368/2: np.sin
368/3: x
368/4: x = lambda : x
368/5: x
368/6: x(1)
368/7: x = lambda x : x
368/8: x(5)
368/9: import q1
368/10:
a = 2*sc.pi/365
f = [lambda f_0 : 1, lambda f_1 : f_1, lambda f_3 : np.sin(a*f_1)]
368/11: import numpy as np
368/12: import scipy.constants as sc
368/13: a = 2*sc.pi/365
368/14: f = [lambda f_0 : 1, lambda f_1 : f_1, lambda f_3 : np.sin(a*f_1)]
368/15: q1.ls??
370/1: import q1
370/2: ls
370/3: pwd
370/4: git status
371/1: import q1
371/2: import q1
372/1: import q1
372/2: a = 2*sc.pi/365
372/3: import scipy.constants as sc
372/4: a = 2*sc.pi/365
372/5: f = [lambda f_0 : 1, lambda f_1 : f_1, lambda f_3 : np.sin(a*f_1)]
372/6: f
372/7: import numpy as np
372/8: x = np.array([1,2,3,4])
372/9: y = np.array([5,7,9,11])
372/10: q1.ls(x,y,f)
372/11: f[0](1)
372/12: f = [lambda f_0 : 1, lambda f_1 : f_1, lambda f_3 : np.sin(a*f_3)]
372/13: q1.ls(x,y,f)
373/1: import numpy as np
373/2: import scipy as sc
373/3: import q1
373/4: x = np.array([1,2,3,4])
373/5: y = np.array([5,10,15,20])
373/6: f = [lambda f_0 : 1, lambda f_1 : f_1, lambda f_3 : np.sin(f_3)]
373/7: f
373/8: q1(x,y,f)
373/9: q1.ls(x,y,f)
373/10: import q1
373/11: q1.ls(x,y,f)
373/12: import q1
373/13: q1.ls(x,y,f)
373/14: import q1
373/15: q1.ls(x,y,f)
373/16: import q1
373/17: q1.ls(x,y,f)
373/18: np.array([[i(x_n) for i in f] for x_n in x])
373/19: A = np.array([[i(x_n) for i in f] for x_n in x])
373/20: A
373/21: A.transpose()
373/22: AT = A.transpose()
373/23: np.linalg.solve(np.dot(AT, A), np.dot(AT, y))
373/24: import q_1
373/25: ls
373/26: import q1
373/27: q1.ls(x,y,f)
373/28: import q1
373/29: q1.ls(x,y,f)
373/30: np.linalg.solve(np.dot(AT, A), np.dot(AT, y))
373/31: x
373/32: y
373/33: A
373/34: AT
373/35: A = np.array([[i(x_n) for i in f_space] for x_n in x], dtype=np.float)
373/36: A = np.array([[i(x_n) for i in f] for x_n in x], dtype=np.float)
373/37: import q1
373/38: q1.ls(x,y,f)
373/39: import q1
373/40: q1.ls(x,y,f)
373/41: import q1
373/42: q1.ls(x,y,f)
374/1: import numpy as np
374/2: import q1
374/3: x = [1, 2, 3, 4]
374/4: y = [4,7,10,13]
374/5: f = [lambda f_0 : 1, lambda f_1 : f_1, lambda f_3 : np.sin(f_3)]
374/6: q1.ls(x,y,f)
374/7: import q1
374/8: q1.ls(x,y,f)
375/1: import numpy as np
375/2: import q1
375/3: x = [1, 2, 3, 4]
375/4: y = [4,7,10,13]
375/5: f = [lambda f_0 : 1, lambda f_1 : f_1, lambda f_3 : np.sin(f_3)]
375/6: q1.ls(x,y,f)
376/1: import q1
376/2: x = [1, 2, 3, 4]
376/3: y = [4,7,10,13]
376/4: f = [lambda f_0 : 1, lambda f_1 : f_1, lambda f_3 : np.sin(f_3)]
376/5: q1.ls(x,y,f)
381/1: x = [1,2,3,4]
381/2: y = [3,5,6,7]
381/3: [(x_n+y_n) for x_n,y_n in (x,y)]
381/4: [(i[0]+i[1]) for i in (x,y)]
381/5: (x,y)
381/6: [(i[0]+i[1]) for i in (x,y)]
391/1: s = "COMPUTERS ARE USELESS–THEY CAN ONLY GIVE YOU ANSWERS"
391/2: s
391/3: n_1 = 3151316
391/4: n_2 = 21200518
391/5: n_3 = 19270118
391/6: n_4 = 5272119
391/7: n = 27989898
391/8: (n_1*37)%n
391/9: (n_2*37)%n
391/10: (n_3*37)%n
391/11: (n_4*37)%n
391/12: n/37
391/13: n-37*int(n/37)
391/14: 11*767483
391/15: 11*767483+8
391/16: x = 19547577
391/17: (x*4589986)%n
391/18: n
391/19: x = -8442321
391/20: (x*4589986)%n
391/21: (x*5251573)%n
391/22: 4**129%7
391/23: import math
392/1: import numbthy
393/1: import numbthy
394/1: import functools
395/1: import numbthy
395/2: ls
396/1: import numbthy as nt
396/2: nt.factor(581)
396/3: nt.euler_phi(2905)
396/4: nt.factor(2905)
396/5: 4*6*82
396/6: nt.euler_phi(656)
396/7: nt.factor(27720)
396/8: nt.euler_phi(27720)
396/9: 2^99
396/10: nt.euler_phi(28)
396/11: nt.euler_phi(36)
396/12: nt.euler_phi(26)
396/13:
for i in range(50):
    if nt.euler_phi(i) == 12:
        print(i)
396/14:
for i in range(100):
    if nt.euler_phi(i) == 12:
        print(i)
396/15: nt.euler_phi(56)
396/16: nt.euler_phi(20)
396/17: nt.euler_phi(63)
396/18: nt.pow_mod(71,964,2897)
396/19: nt.power_mod(71,964,2897)
396/20: nt.inverse_mod(2317,2897)
396/21: nt.power_mod(920,5,2881)
396/22: clear
396/23: nt.power_mod(3067,3599,4747)
396/24: nt.power_mod(3067,4599,4747)
396/25: d = [1563,4362,2416,1730,3660,192]
396/26:
for x in d:
    print(nt.power_mod(x,2495,4747))
396/27: nt.power_mod(1563,2495,4747)
396/28: d = [71,2450,404,324,633,1804]
396/29: r = [nt.power_momd(m,5,2897) for m in d]
396/30: r = [nt.power_mod(m,5,2897) for m in d]
396/31: r
396/32: d = [71,2450,404,324,633,1804]
396/33: r = [nt.power_mod(m,5,2897) for m in d]
396/34: r
396/35: d = [71,2450,404,324,633,1804]
396/36: d
396/37: s = [nt.power_mod(m,5,2897) for m in d]
396/38: s
396/39: d
396/40: d = [1563,4362,2416,1730,3660,192]
396/41: d
396/42: r = [nt.power_mod(m,3,4747) for m in d]
396/43: r
396/44:
for i in range(57):
    if 3233 % i == 0:
        print(i)
396/45:
for i in range(1,57):
    if 3233 % i == 0:
        print(i)
398/1: import q2
398/2: q2.converge_to_golden(0.001)
398/3: q2.converge_to_golden(0.0001)
398/4: q2.converge_to_golden(0.001)
399/1: import q2
399/2: q2.converge_to_golden(0.0001)
400/1: import q2
400/2: q2.converge_to_golden(0.0001)
442/1: import numpy as np
442/2: ls
442/3: ls
442/4: s_wave = np.load('s_wave.npy')
442/5: s_wave
442/6: import matplotlib.pyplot as plt
445/1: import numpy as np
445/2: d = np.load('s_wave.npz')
445/3: d
445/4: d[0]
445/5: d
445/6: d['arr_0']
447/1: import numpy as np
447/2: ls
447/3: x = np.loadtext('s_wave.txt')
447/4: x = np.loadtxt('s_wave.txt')
447/5: x
450/1: import numpy as np
450/2: np.loadcsv('s_wave.csv')
450/3: np.loadtxt('s_wave.csv',delimiter=',')
452/1: import h5py
452/2: h5_file = h5py.File('s_wave.h5', 'r')
452/3: print(h5_file.keys())
452/4: import matplotlib.pyplot as plt
452/5: plt.plot(h5_file['time'], h5_file['data'])
452/6: plt.show()
452/7: h5_file.close()
453/1: ls
453/2: import h5py
453/3: f = h5py.File('test_ssx_particle_trajectory.h5', 'r')
453/4: f.keys()
453/5: f['r']
453/6: f['v']
454/1: import h5py
454/2: f = h5py.File('test_ssx_particle_trajectory.h5', 'r')
454/3: f['r']
454/4: v = f['r']
454/5: ls
454/6: v.shape
454/7: v[10]
454/8: v[5:10]
454/9: ex = v[5:20]
454/10: ex
454/11: x = ex[:,0]
454/12: x
454/13: ls
468/1: import h5py
468/2: ls
469/1: import h5py
469/2: f = h5py.File('test_ssx_particle_trajectory.h5', 'r')
469/3: f.keys()
469/4: f['dt']
469/5: f['dt'][0]
469/6: f['B']
469/7: f['B'][:,0]
469/8: f['B'][:,1]
469/9: f['B'][:,2]
469/10: import matplotlib.pyplot as plt
469/11: ls
469/12: cd ../
469/13: ls
469/14: cd File_IO
469/15: ls
469/16: import e2
469/17: %timeit(e2.write_to_h5('s_wave'))
469/18: %timeit e2.write_to_h5('s_wave')
476/1: t = 0
476/2:
for i in range(10):
    run q3.py
476/3: clear
486/1: import h5py
486/2: f = h5py.File('test_ssx_particle_trajectory.h5', 'r')
486/3: f.keys()
486/4: from matplotlib.cm import get_cmap
486/5: get_cmap()
486/6: get_cmap('hsv')
518/1: import e1
518/2: e1.d_planck(5)
520/1: import e1
520/2: e1.d_planck(5)
526/1: 0.529e-10
531/1: e_1 = lambda s : s*(1/np.tan(s)) + np.sqrt(1 - s^2)
531/2: e_1(3)
531/3: import numpy as np
531/4: e_1(3)
531/5: e_1(0.1)
538/1: from scipy.optimize import fsolve
538/2: f(x) = lambda x : x**2 - 1
538/3: f = lambda x : x**2 - 1
538/4: f(3)
538/5: fsolve(f, 0.5)
538/6: fsolve(f,-0.5)
538/7: fsolve(f,[-0.5,0.5])
538/8: import numpy as np
538/9: f = lambda x : np.sqrt(x-3)
538/10: f(1)
538/11: f = lambda x : np.sqrt(x-3)-7
538/12: fsolve(f, 0)
538/13: fsolve(f, 5)
538/14: import scipy.constants as sc
538/15: k_exp2 = 2*sc.electron_mass*a**2*(v_0/sc.hbar)
538/16: a = 0.529e-10
538/17: v_0 = 1.0
538/18: k_exp2 = 2*sc.electron_mass*a**2*(v_0/sc.hbar)
538/19: k_exp2
550/1: x = 1e-20
550/2: x
550/3: import numpy as np
550/4: np.sin(x)
558/1: import matplotlib.pyplot
559/1: import matplotlib.pyplot as plt
559/2: import numpy as np
559/3: a = 0.529e-10
559/4: v_0 = 1.0
559/5: import scipy.constants as sc
559/6: k_exp2 = 2*sc.electron_mass*a**2*(v_0/sc.hbar)
559/7: k_exp2
559/8: x = np.linspace(0,k_exp2)
559/9: f = lambda s : s*(np.cos(s)/np.sin(s))+np.sqrt(k_exp2-s**2)
559/10: f(1e17)
559/11: x = np.linspace(0,np.sqrt(k_exp2))
559/12: np.sqrt(k_exp2)
559/13: x
559/14: f(1e-9)
559/15: y = f(x)
559/16: y
559/17: x = np.linspace(0,np.sqrt(k_exp2),500)
559/18: x
559/19: y = f(x)
559/20: y
559/21: clear
561/1: import numpy as np
561/2: np.cos(6e-9)/np.sin(6e-9)
561/3: np.cos(6e-9)/np.sin(6e-9)*6e-9
658/1: from scipy.integrate import quad
658/2:
def gaus(x):
    return exp(-x**2)
658/3: quad(gaus,-inf,inf)
658/4: from pylab import *
658/5: quad(gaus,-inf,inf)
659/1: import numpy as np
659/2: np.inf
949/1: import scipy.constants as pc
949/2: import numpy as np
949/3: pc.h/(pc.electron_mass*pc.c)*(1-np.cos(130*np.pi/180))
949/4: pc.h*pc.c
949/5: pc.h*pc.c/pc.e
949/6: pc.h/(pc.m_p*pc.c)*2
949/7: pc.h/(pc.m_e*pc.c)*2
1006/1: import scipy.constants as pc
1006/2: pc.g
1006/3: pc.G
1084/1: import scipy.constants as pc
1084/2: pc.hbar**2/(pc.k*pc.e**2*pc.m_e)
1084/3: (6.58*10**-16)**2*(3.0*10**17)**2/1.44
1084/4: (6.58*10**-16)**2*(3.0*10**17)**2/(1.44*10**6)
1084/5: (6.58*10**-16)**2*(3.0*10**17)**2/(1.44*10**6)*2
1084/6: pc.hbar
1084/7: h_b = pc.hbar*1/(pc.e)
1084/8: h_b
1084/9: c = pc.c*10**9
1084/10: c
1084/11: h_b**2*c**2/(1.44*0.511*10**6)
1124/1: import main_analysis
1124/2: main_analysis.s_voltage_8
1149/1: import scipy.constants as pc
1149/2:  pc.c
1149/3: c = pc.c * 10**9
1149/4: c
1149/5: th = (1 - c*(1*10**-15))/(0.05)
1149/6: th
1149/7: import numpy as np
1149/8: np.sin(2*np.pi*th)
1313/1: a = {1,2,3,4,'f',True}
1313/2: b = {2,1,'f',False}
1313/3: a+b
1313/4: a - b
1313/5: a = {1,2,3,4,5,6,7,8}
1313/6: b = {0,1,2,3}
1313/7: a - b
1313/8: a ^ b
1313/9: a = {1,2,3,4,'f',True}
1313/10: b = {2,1,'f',False}
1313/11: a ^ b
1313/12: import pandas as pd
1313/13: df = pd.DataFrame({'A' : [1,0,1,0,0], 'B' : ['Yes', 'No','No','Yes','Yes']})
1313/14: df
1313/15: df2 = pd.DataFrame({'A' : [1,1,1,0,1], 'B' : ['No', 'No','Yes','No','Yes']})
1313/16: df2
1313/17: d = df[df.A == 1]
1313/18: d
1313/19: d = df[df['A'] == 1]
1313/20: d
1313/21: d2 = df2[df2['A'] == 1]
1313/22: d2
1313/23: d = df[df['B'] == 'Yes']
1313/24: d
1313/25: d2 = df2[df2['B'] == 'Yes']
1313/26: d2
1313/27: df2 = pd.DataFrame({'A' : [1,3,1,5,1], 'B' : ['No', 'No','Yes','No','Yes']})
1313/28: df = pd.DataFrame({'A' : [6,0,5,0,3], 'B' : ['Yes', 'No','No','Yes','Yes']})
1313/29: d2 = df2[df2['B'] == 'Yes']
1313/30: d2
1313/31: df2 = pd.DataFrame({'A' : [1,3,1,5,1], 'B' : ['No', 'No','Yes','Yes','Yes']})
1313/32: d2 = df2[df2['B'] == 'Yes']
1313/33: d2
1313/34: d = df[df['B']=='Yes' & df['A'] in d2['A']]
1313/35: d = df[df['B']=='Yes' and  df['A'] in d2['A']]
1313/36: d = df[df['B']=='Yes' and  df['A'] in d2['A']]
1313/37: df['A'] in d['A']
1313/38: df[df['A'] in d['A']]
1313/39: df[df['A'] in list(d['A'])]
1313/40: df['A'][0]
1313/41: df['A'][0] in d['A']
1318/1: from e2 import simulation
1318/2: simulation()
1318/3: simulation()
1319/1: from e2 import simulation
1320/1: from e2 import simulation
1321/1: from e2 import simulation
1321/2: simulation()
1322/1: %load_ext autoreload
1322/2: autoreload 2
1322/3: from e2 import simulation
1322/4: autoreload 2
1322/5: simulation()
1339/1: from q import pi_estimate
1340/1: %load_ext autoreload
1340/2: autoreload 2
1340/3: from q import pi_estimate
1340/4: pi_estimate(10)
1340/5: pi_estimate(10)
1340/6: pi_estimate(10)
1340/7: pi_estimate(10)
1340/8: pi_estimate(10)
1340/9: pi_estimate(10)
1340/10: pi_estimate(10)
1340/11: pi_estimate(10000)
1340/12: pi_estimate(1000000000)
1340/13: pi_estimate(1000000)
1365/1: import numpy as np
1365/2: np.logspace(10, 10**2)
1365/3: [int(n) for n in np.logspace(10, 10**3)]
1365/4: np.logspace(10, 10**3)
1371/1: from analysis import parse
1371/2: from analysis import parse
1371/3: %load_ext autoreload
1371/4: %autoreload 2
1371/5: from analysis import parse
1371/6: from analysis import parse
1371/7: out = parse('dump.lammpstrj')
1371/8: out = parse('dump.lammpstrj')
1371/9: out = parse('dump.lammpstrj')
1371/10: out = parse('dump.lammpstrj')
1371/11: out = parse('dump.lammpstrj')
1371/12: out
1371/13: out
1371/14: out = parse('dump.lammpstrj')
1371/15: out
1371/16: out = parse('dump.lammpstrj')
1371/17: out = parse('dump.lammpstrj')
1371/18: out = parse('dump.lammpstrj')
1371/19: out = parse('dump.lammpstrj')
1371/20: out = parse('dump.lammpstrj')
1371/21: out = parse('dump.lammpstrj')
1371/22: out = parse('dump.lammpstrj')
1371/23: out = parse('dump.lammpstrj')
1371/24: out = parse('dump.lammpstrj')
1371/25: clear
1371/26: out = parse('dump.lammpstrj')
1371/27: out = parse('dump.lammpstrj')
1371/28: out = parse('dump.lammpstrj')
1371/29: out = parse('dump.lammpstrj')
1371/30: out = parse('dump.lammpstrj')
1371/31: out
1371/32: out = parse('dump.lammpstrj')
1371/33: out
1371/34: out = parse('dump.lammpstrj')
1371/35: out
1371/36: out[2].shape
1371/37: out[2].shape
1371/38: out = parse('dump.lammpstrj')
1371/39: out = parse('dump.lammpstrj')
1371/40: out = parse('dump.lammpstrj')
1371/41: out = parse('dump.lammpstrj')
1371/42: out = parse('dump.lammpstrj')
1371/43: out = parse('dump.lammpstrj')
1371/44: out
1371/45: out[1].shape
1371/46: out[1][0]
1371/47: out = parse('dump.lammpstrj')
1371/48: out = parse('dump.lammpstrj')
1371/49: out = parse('dump.lammpstrj')
1371/50: out = parse('dump.lammpstrj')
1371/51: out = parse('dump.lammpstrj')
1371/52: out = parse('dump.lammpstrj')
1371/53: out
1371/54: out[1].shape
1371/55: out = parse('dump.lammpstrj')
1371/56: out = parse('dump.lammpstrj')
1371/57: out
1371/58: a = np.ones((3,3))
1371/59: import numpy as np
1371/60: a = np.ones((3,3))
1371/61: a
1371/62: b = 2*np.ones((3,3))
1371/63: b
1371/64: c = 3*np.ones((3,3))
1371/65: a + b
1371/66: X = np.array([])
1371/67: X[0]
1371/68: X = np.insert(X,a)
1371/69: out = parse('dump.lammpstrj')
1371/70: out
1371/71: out = parse('dump.lammpstrj')
1371/72: out = parse('dump.lammpstrj')
1483/1: import numpy as np
1483/2: r = np.array([10,13,8,15,8,13,14,13,19,8,13,13,7,8,6,8,11,12,8,7])
1483/3: r.hist
1483/4: r.hist()
1483/5: len(r)
1483/6: r
1483/7: np.sum(r)
1483/8: mean = np.sum(r)/len(R)
1483/9: mean = np.sum(r)/len(r)
1483/10: mena
1483/11: mean
1483/12: std = 0
1483/13: dev = 0
1483/14:
for i in r:
    dev += (i-mean)**2
1483/15: dev
1483/16: std = np.sqrt(1/(len(r)-1)*dev)
1483/17: std
1483/18: np.sqrt(mean)
1483/19: clear
1483/20: r = np.array([10,13,8,15,8,13,14,13,19,8,13,13,7,8,6,8,11,12,8,7])
1483/21: mean = np.sum(r)/len(r)
1483/22: dev = 0
1483/23:
for i in r:
    dev += (i-mean)**2
1483/24: std = np.sqrt(1/(len(r)-1)*dev)
1483/25: mean
1483/26: dev
1483/27: std
1483/28: np.sqrt(mean)
1483/29: np.std(r)
1483/30: np.mean(r)
1483/31: np.std(r,ddom=1)
1483/32: np.std(r,ddof=1)
1483/33: sdom = std/np.sqrt(len(r))
1483/34: sdom
1483/35: #Number of cosmic rays in two minutes: 10.7 +/- 0.8
1483/36: total = np.sum(r)
1483/37: total
1483/38: total/20
1483/39: np.sqrt(total/20)
1483/40: np.sqrt(total/20)/np.sqrt(20)
1483/41: #Number of cosmic rays in two seconds (last one is seconds also): 10.7 +/- 0.7
1483/42: np.sum(r)
1483/43: np.sqrt(np.sum(r))
1483/44: np.sqrt(np.sum(r))/len(r)
1510/1:
import numpy as np
import matplotlib.pyplot as plt
1510/2:
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
1515/1: import numpy as np
1515/2: np.loadtxt?
1519/1: mass = np.loadtxt('Class_Data.csv',delimiter=',', skiprows=1)
1519/2:
import numpy as np
import matplotlib.pyplot as plt
1519/3: mass = np.loadtxt('Class_Data.csv',delimiter=',', skiprows=1)
1519/4: mass
1519/5: mass.sort()
1519/6: np.sort(mass)
1519/7: np.histogram(mass)
1519/8: plt.scatter(mass)
1519/9: plt.plot(n)
1519/10: plt.plot(mass)
1519/11:
import numpy as np
import matplotlib.pyplot as plt
1519/12: mass = np.loadtxt('Class_Data.csv',delimiter=',', skiprows=1)
1519/13: plt.plot(mass)
1519/14: plt.plot(mass,marker="o")
1519/15: plt.hist(mass)
1519/16: plt.hist(mass,bins=30)
1519/17:
import numpy as np
import matplotlib.pyplot as plt
from penny import gaussian
1519/18: mass = np.loadtxt('Class_Data.csv',delimiter=',', skiprows=1)
1519/19: plt.hist(mass,bins=30)
1519/20:
import numpy as np
import matplotlib.pyplot as plt
from penny import gaussian
1519/21:
import numpy as np
import matplotlib.pyplot as plt
from penny import gaussian
1519/22: plt.hist(mass,bins=20)
1519/23: plt.hist(mass,bins=15)
1519/24: plt.hist(mass,bins=40)
1519/25: len(mass)
1519/26: plt.hist(mass,bins=50)
1519/27: plt.hist(mass,bins=40)
1519/28: plt.hist(mass,bins=50)
1519/29: plt.hist(mass,bins=100)
1519/30: plt.hist(mass,bins=40)
1525/1: a = np.array([12,34,22,14,22,17,24,22,18,14,18,12])
1525/2: import numpy as np
1525/3: a = np.array([12,34,22,14,22,17,24,22,18,14,18,12])
1525/4: a.mean()
1525/5: a.std(ddof=1)
1525/6: a.size
1525/7: 0.0124*12
1525/8: a = a[a<33]
1525/9: a
1525/10: a.mean()
1525/11: a.std(dd0f=1)
1525/12: a.std(ddof=1)
1525/13: a = np.array([28,25,29,18,29,24])
1525/14: a.mean()
1525/15: a.std(ddof=1)
1530/1: from penny import prob_in
1530/2: prob_in(2)
1531/1: 0.5/68
1531/2: 0.5/60
1569/1: ((12*35)-(9*26))/(3*35-9**2)
1569/2: (3*26-12*9)/(3*35-9**2)
1594/1: import numpy as np
1594/2: x = np.array([20,23,23,22])
1594/3: y = np.array([30,32,35,31])
1594/4: x.mean()
1594/5: y.mean()
1594/6: x.var()
1594/7: y.var()
1594/8: np.cov(x,y)
1594/9: np.cov(y,x)
1594/10: 7/4
1594/11: 7/3
1594/12: x.var(ddof=1)
1594/13: y.var(ddof=1)
1594/14: q = x + y
1594/15: q
1594/16: q.mean()
1594/17: q.var()
1612/1:
import numpy as np
import matplotlib.pyplot as plt
1613/1:
import numpy as np
import matplotlib.pyplot as plt

#define a function that allows me to generate a sine wave with a 
# given frequency and time lag relative to zero
def mysine(t, f = 10., lag=0):
    return np.sin(2*np.pi*f*(t - lag))
1613/2:
#let's look at some waves:
t = np.linspace(0,1,1000)
#the default frequency is 10 Hz, so a time lag of 0.02s will shift it by 1/5 cycle
s1 = mysine(t)
s2 = mysine(t,lag=0.02)

plt.plot(t, s1, label='lag = 0')
plt.plot(t, s2, label='lag = 0.02')
plt.legend()
1613/3:
#for the raw correlation, we use the default settings
corr = np.correlate(s1,s2)
print(corr)

#normalize it
corr_norm = corr/((t.size-1)*s1.std()*s2.std())
print(corr_norm)
1613/4:
# if we specify that the correlation mode is 'same', then the lag will vary 
# from -half the signal length to + half the signal length to produce
# a correlation function with the same length as the original signals
corr_same = np.correlate(s1,s2,mode='same')

# normalize it
corr_same_norm = corr_same/((t.size-1)*s1.std()*s2.std())

# numpy's correlate function uses the time spacing of the points as lags,
# so the array of lag times is the same number of points as the signals (mode='same')
# and the lag is zero in the center:
dt = t[1]-t[0]
lag = dt*(np.arange(corr_same.size) - corr_same.size/2) 

plt.plot(lag, corr_same_norm)
plt.grid()
plt.xlabel('Time lag (s)')
plt.ylabel('Correlation value (norm)')
1613/5:
#note both that the correlation at zero lag is relatively low (the 0.3 calculated above)
# and that the peak correlation and anticorrelation don't happen at zero lag!

max_lag = lag[corr_same_norm.argmax()]
print(max_lag)
1613/6:
# if you switch the order of the signals, notice what happens:
corr_same = np.correlate(s2,s1,mode='same')

# normalize it
corr_same_norm = corr_same/((t.size-1)*s1.std()*s2.std())

# show the lag plot
plt.plot(lag, corr_same_norm)
plt.grid()
plt.xlabel('Time lag (s)')
plt.ylabel('Correlation value (norm)')

# find the lag with the max correlation value
max_lag = lag[corr_same_norm.argmax()]
print(max_lag)
1613/7:
import numpy as np
import h5py 

#routine to parse oscilloscope data saved to HDF5 file
def get_keysight_data(filename):
    #open file as a data object (`with` statement takes care of 
    # closing the file when the code inside is done running or if
    # the program crashes
    with h5py.File(filename, mode='r') as file_obj:
        #now read out the time base information
        ch1_obj = file_obj['Waveforms']['Channel 1']
        #get total number of points in waveforms
        n = np.arange(ch1_obj.attrs['NumPoints'])
        #get initial time
        t0 = ch1_obj.attrs['XOrg']
        #get time increment
        delta_t = ch1_obj.attrs['XInc']
        
        #construct time array
        time_raw = t0 + (n-1)*delta_t

        #read out voltage data
        ch1_raw = ch1_obj['Channel 1 Data'][()]
        #if we don't need to interact with the object, we can 
        # just address the data directly
        ch2_raw = file_obj['Waveforms']['Channel 2']['Channel 2 Data'][()]
        
    return time_raw, ch1_raw, ch2_raw


#using this function and the knowledge from the experiment log 
# that channel 1 is current and channel 2 is voltage:

t, I, V = get_keysight_data('jet_example_data.h5')
1613/8: t
1613/9:
plt.plot(t, I)
plt.plot(t, V)
1613/10:
plt.plot(t, I)
#plt.plot(t, V)
1613/11: plt.plot(t, I)
1613/12:
fig, (ax1,ax2) = plt.subplots(2,1)
ax1.plot(t, I)
ax2.plot(t,V)
1613/13:
fig, (ax1,ax2) = plt.subplots(2,1)
ax1.plot(t, I)
ax1.title('Current')
ax2.plot(t,V)
ax1.title('Voltage')
1613/14:
fig, (ax1,ax2) = plt.subplots(2,1)
ax1.plot(t, I)
ax1.set_title('Current')
ax2.plot(t,V)
ax1.set_title('Voltage')
1613/15:
fig, (ax1,ax2) = plt.subplots(2,1)
ax1.plot(t, I)

ax2.plot(t,V)
1613/16:
corr_same = np.correlate(I,V,mode='same')
plt.plot(t,corr_same)
1613/17:
I_n = I/I.max()
V_n = V/V.max()
plt.plot(t, I_n)
plt.plot(t,V_n)
1613/18:
I_n = I/I.max()
V_n = V/V.max()
plt.plot(t, I_n)
plt.plot(t,V_n)
plt.plot(t, np.zeros(len(t)))
1613/19:
I_n = I/I.max()
V_n = V/V.max()
plt.plot(t, I_n)
plt.plot(t,V_n)
plt.grid()
1613/20:
corr_same = np.correlate(I,V,mode='same')
plt.plot(t,corr_same)
plt.grid()
1613/21:
norm_corr = corr_same/((np.size(I)-1)*I.std()*V.std())
dt = t[1]-t[0]
1613/22:
norm_corr = corr_same/((np.size(I)-1)*I.std()*V.std())
dt = t[1]-t[0]
lag = dt*(np.arange(corr_same.size) - corr_same.size/2)
max_lag = lag[norm_corr.argmax()]
print(max_lag)
1613/23:
phase_shift_fraction = max_lag*18e3
phase_shift_fraction
1613/24:
phase_shift_fraction = max_lag*18e3
phase_shift_fraction
1613/25:
phase_shift_fraction = max_lag*18e3
phase_shift_fraction*360
1613/26:
phase_shift_fraction = max_lag*18e3
shift = phase_shift_fraction*360
shift
1613/27: V.max()*np.cos(np.radians(shift))/V.max()*np.sin(radians(shift))
1613/28: np.cot
1613/29: 1/np.tan(np.deg2rad(shift))
1615/1: import numpy as np
1615/2: r_1 = np.array([95.31, 94.82, 94.85, 94.88])
1615/3: r_1.mean()
1615/4: r_1.std()
1615/5: r_1.std()/r_1.size()
1615/6: r_1.std()/len(r_1)
1615/7: s_1 = np.array([8.72,8.64,8.76,8.50])
1615/8: s_1.mean()
1615/9: s_1.std()/len(s_1)
1615/10: s_2.mean([11.70,11.59,11.60,11.46])
1615/11: s_2 = np.array([11.70,11.59,11.60,11.46])
1615/12: s_2.mean()
1615/13: s_2.std()/len(s_2)
1616/1:
import numpy as np #label namespace of Numpy functions as 'np' for shorter commands
import matplotlib.pyplot as plt #same for simple plotting

#load the labels and uncertainties from the first line of your group's data file
#  open the file by creating a file object with the name 'data_file'
data_file = open("../data/conductivity_data_group_x.txt", 'r')
#  read the first line
column_label = data_file.readline()
#  look at the text in the first line, which contains the column label(s)
print(column_label)
1616/2:
import numpy as np #label namespace of Numpy functions as 'np' for shorter commands
import matplotlib.pyplot as plt #same for simple plotting

#load the labels and uncertainties from the first line of your group's data file
#  open the file by creating a file object with the name 'data_file'
data_file = open("../data/conductivity_data_group_x.txt", 'r')
#  read the first line
column_label = data_file.readline()
#  look at the text in the first line, which contains the column label(s)
print(column_label)
1616/3:
import numpy as np #label namespace of Numpy functions as 'np' for shorter commands
import matplotlib.pyplot as plt #same for simple plotting

#load the labels and uncertainties from the first line of your group's data file
#  open the file by creating a file object with the name 'data_file'
data_file = open("../data/conductivity_data_group_x.txt", 'r')
#  read the first line
column_label = data_file.readline()
#  look at the text in the first line, which contains the column label(s)
print(column_label)
1616/4:
import numpy as np #label namespace of Numpy functions as 'np' for shorter commands
import matplotlib.pyplot as plt #same for simple plotting

#load the labels and uncertainties from the first line of your group's data file
#  open the file by creating a file object with the name 'data_file'
data_file = open("conductivity_data_group_x.txt", 'r')
#  read the first line
column_label = data_file.readline()
#  look at the text in the first line, which contains the column label(s)
print(column_label)
1616/5:
#so the first column is temperature and the second is resistance
#label the uncertainties
delta_T = 0.5 #K
delat_R = 0.1 #Ohms

#load the resistance data from your group's data file into a numpy array for analysis
data = np.loadtxt("../data/conductivity_data_group_x.txt",delimiter=',',skiprows=1) 
#  check that the data looks like the numbers in the text file
print(data)

#we can split it into two variables for easier manipulation
T = data[:,0] #first column (K)
R = data[:,1] #second column (Ohms)
1616/6:
#so the first column is temperature and the second is resistance
#label the uncertainties
delta_T = 0.5 #K
delat_R = 0.1 #Ohms

#load the resistance data from your group's data file into a numpy array for analysis
data = np.loadtxt("conductivity_data_group_x.txt",delimiter=',',skiprows=1) 
#  check that the data looks like the numbers in the text file
print(data)

#we can split it into two variables for easier manipulation
T = data[:,0] #first column (K)
R = data[:,1] #second column (Ohms)
1616/7:
#take a look at the data
plt.plot(T,R,'o')
1616/8:
def tanh(x, A, b, c, sigma, C):
    return A*np.tanh((bx-c)/sigma) + C
1616/9: tanh(10)
1616/10:
def tanh(x, A=1, b=1, c=1, sigma=1, C=0):
    return A*np.tanh((bx-c)/sigma) + C
1616/11: tanh(10)
1616/12:
def tanh(x, A=1, b=1, c=1, sigma=1, C=0):
    return A*np.tanh((b*x-c)/sigma) + C
1616/13: tanh(10)
1616/14: tanh(0.2)
1616/15:
test_x = np.linspace(-3*np.pi,3*np.pi,0.01)
plt.plot(text_x,tanh(test_x))
1616/16:
test_x = np.arange(-3*np.pi,3*np.pi,0.01)
plt.plot(text_x,tanh(test_x))
1616/17:
test_x = np.arange(-3*np.pi,3*np.pi,0.01)
plt.plot(text_x,tanh(test_x))
1616/18:
test_x = np.arange(-3*np.pi,3*np.pi,0.01)
plt.plot(test_x,tanh(test_x))
1616/19: from scipy.optimize import curve_fit
1616/20: curve_fit(tanh,T,R)
1616/21:
test_x = np.arange(-3*np.pi,3*np.pi,0.01)
plt.plot(test_x,tanh(test_x,**fit))
1616/22: fit = curve_fit(tanh,T,R)
1616/23:
test_x = np.arange(-3*np.pi,3*np.pi,0.01)
plt.plot(test_x,tanh(test_x,**fit))
1616/24:
test_x = np.arange(-3*np.pi,3*np.pi,0.01)
plt.plot(test_x,tanh(test_x,*fit))
1616/25:
fit = curve_fit(tanh,T,R)
fit
1616/26:
test_x = np.arange(-3*np.pi,3*np.pi,0.01)
plt.plot(test_x,tanh(test_x,fit[0],fit[1],fit[2],fit[3],fit[4]))
1616/27:
test_x = np.arange(-3*np.pi,3*np.pi,0.01)
plt.plot(test_x,tanh(test_x,*fit[0]))
1616/28:
test_x = np.arange(-3*np.pi,3*np.pi,0.01)
plt.plot(test_x,tanh(test_x,*fit[0]))
plt.plot(T,R,'o')
1616/29:
test_x = np.arange(T.min(),t.max(),0.01)
plt.plot(test_x,tanh(test_x,*fit[0]))
plt.plot(T,R,'o')
1616/30:
test_x = np.arange(T.min(),T.max(),0.01)
plt.plot(test_x,tanh(test_x,*fit[0]))
plt.plot(T,R,'o')
1616/31:
test_x = np.arange(T.min()-10,T.max(),0.01)
plt.plot(test_x,tanh(test_x,*fit[0]))
plt.plot(T,R,'o')
1616/32:
test_x = np.arange(-3*np.pi,3*np.pi,0.01)
plt.plot(test_x,tanh(test_x,*fit[0]))
plt.plot(T,R,'o')
1616/33:
test_x = np.arange(-3*np.pi,T.max(),0.01)
plt.plot(test_x,tanh(test_x,*fit[0]))
plt.plot(T,R,'o')
1616/34:
fit = curve_fit(tanh,T,R,p0=[8,1,95,1,8])
fit
1616/35:
test_x = np.arange(-3*np.pi,T.max(),0.01)
plt.plot(test_x,tanh(test_x,*fit[0]))
plt.plot(T,R,'o')
1616/36:
test_x = np.arange(T.min(),T.max(),0.01)
plt.plot(test_x,tanh(test_x,*fit[0]))
plt.plot(T,R,'o')
1616/37:
fit = curve_fit(tanh,T,R,p0=[7,1,95,1,8])
fit
1616/38:
test_x = np.arange(T.min(),T.max(),0.01)
plt.plot(test_x,tanh(test_x,*fit[0]))
plt.plot(T,R,'o')
1616/39:
fit = curve_fit(tanh,T,R,p0=[7,95,1,8])
fit
1616/40:
fit = curve_fit(tanh,T,R,p0=[8,95,1,8])
fit
1616/41:
def tanh(x, A=1, c=1, sigma=1, C=0):
    return A*np.tanh((x-c)/sigma) + C
1616/42: from scipy.optimize import curve_fit
1616/43:
fit = curve_fit(tanh,T,R,p0=[8,95,1,8])
fit
1616/44:
test_x = np.arange(T.min(),T.max(),0.01)
plt.plot(test_x,tanh(test_x,*fit[0]))
plt.plot(T,R,'o')
1621/1: import numpy as np
1621/2: np.arange(9)
1709/1: import numpy as np
1709/2: T_2 = np.array([0.89,0.90,0.95,0.93,0.95])
1709/3: T_2.mean()
1709/4: T_2.std/len(T_2)
1709/5: T_2.std()/len(T_2)
1791/1:
import numpy as np
import matplotlib.pyplot as plt

wavenumber, amplitude = np.loadtxt('Magnesite.txt', unpack=True)
plt.plot(wavenumber, amplitude)
plt.xlabel('Raman shift (cm$^{-1}$)')
plt.ylabel('Intensity (normalized)')
plt.title('Whole Spectrum')
plt.show()

plt.title('One of the strongest spectral lines')
max_amp_index = np.argmax(amplitude)
one_large_line_wavenumber = wavenumber[max_amp_index - 200:max_amp_index + 200]
one_large_line_amplitude = amplitude[max_amp_index - 200:max_amp_index + 200]
plt.xlabel('wavenumber')
plt.ylabel('intensity')
plt.plot(one_large_line_wavenumber, one_large_line_amplitude)
plt.show()
1791/2:
def Gaussian(x, X, sigma):
    return 1/(sigma*np.sqrt(2*np.pi))*np.exp((x-X)**2/(2*simga**2))

Gaussian(1,0,1)
1791/3:
def Gaussian(x, X, sigma):
    return 1/(sigma*np.sqrt(2*np.pi))*np.exp((x-X)**2/(2*sigma**2))

Gaussian(1,0,1)
1791/4:
def Gaussian(x, X, sigma):
    return 1/(sigma*np.sqrt(2*np.pi))*np.exp((x-X)**2/(2*sigma**2))

x = np.linspace(-3,3)
plt.plot(x,Gaussian(x,0,1))
1791/5:
def Gaussian(x, X, sigma):
    return 1/(sigma*np.sqrt(2*np.pi))*np.exp(-(x-X)**2/(2*sigma**2))

x = np.linspace(-3,3)
plt.plot(x,Gaussian(x,0,1))
1791/6: plt.plot(one_large_line_wavenumber, one_large_line_amplitude)
1791/7: plt.scatter(one_large_line_wavenumber, one_large_line_amplitude)
1791/8: plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')
1791/9:
from scipy.optimize import curve_fit

curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude)
1791/10:
def Gaussian(x, A, X, sigma,C):
    return A*np.exp(-(x-X)**2/(2*sigma**2)) + C

x = np.linspace(-3,3)
plt.plot(x,Gaussian(x,0,1))
1791/11:
def Gaussian(x, A, X, sigma,C):
    return A*np.exp(-(x-X)**2/(2*sigma**2)) + C

x = np.linspace(-3,3)
plt.plot(x,Gaussian(x,1,0,1,2))
1791/12:
from scipy.optimize import curve_fit

#x, A, X, sigma,C
curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,1.17,59,0.5])
1791/13:
from scipy.optimize import curve_fit

#x, A, X, sigma,C
curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])
1791/14:
from scipy.optimize import curve_fit

#x, A, X, sigma,C
fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])

plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/15:
from scipy.optimize import curve_fit

#x, A, X, sigma,C
fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])

plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

print(one_large_line_wavenumber.size)
one_large_line_wavenumber = one_large_line_wavenumber[[x > 1050 for x in one_large_line_wavenumber]]
print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/16:
from scipy.optimize import curve_fit

#x, A, X, sigma,C
fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])

plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

print(one_large_line_wavenumber.size)
one_large_line_wavenumber = one_large_line_wavenumber[[x > 1050 or x < 1150 for x in one_large_line_wavenumber]]
print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/17:
from scipy.optimize import curve_fit

#x, A, X, sigma,C
fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])

plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

print(one_large_line_wavenumber.size)
one_large_line_wavenumber = one_large_line_wavenumber[[x > 1050 for x in one_large_line_wavenumber]]
one_large_line_wavenumber = one_large_line_wavenumber[[x < 1150 for x in one_large_line_wavenumber]]
print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/18:
from scipy.optimize import curve_fit

#x, A, X, sigma,C
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

print(one_large_line_wavenumber.size)
one_large_line_wavenumber = one_large_line_wavenumber[[x > 1050 for x in one_large_line_wavenumber]]
one_large_line_wavenumber = one_large_line_wavenumber[[x < 1150 for x in one_large_line_wavenumber]]
fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])

print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/19:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
one_large_line_wavenumber = one_large_line_wavenumber[[x > 1050 for x in one_large_line_wavenumber]]
one_large_line_wavenumber = one_large_line_wavenumber[[x < 1150 for x in one_large_line_wavenumber]]
fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])
#x, A, X, sigma,C
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/20:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
one_large_line_wavenumber = one_large_line_wavenumber[[x > 1050 for x in one_large_line_wavenumber]]
one_large_line_amplitude = one_large_line_amplitude[[x > 1050 for x in one_large_line_wavenumber]]
one_large_line_wavenumber = one_large_line_wavenumber[[x < 1150 for x in one_large_line_wavenumber]]
one_large_line_amplitude = one_large_line_amplitude[[x < 1150 for x in one_large_line_wavenumber]]

fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])
#x, A, X, sigma,C
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/21:
import numpy as np
import matplotlib.pyplot as plt

wavenumber, amplitude = np.loadtxt('Magnesite.txt', unpack=True)
plt.plot(wavenumber, amplitude)
plt.xlabel('Raman shift (cm$^{-1}$)')
plt.ylabel('Intensity (normalized)')
plt.title('Whole Spectrum')
plt.show()

plt.title('One of the strongest spectral lines')
max_amp_index = np.argmax(amplitude)
one_large_line_wavenumber = wavenumber[max_amp_index - 200:max_amp_index + 200]
one_large_line_amplitude = amplitude[max_amp_index - 200:max_amp_index + 200]
plt.xlabel('wavenumber')
plt.ylabel('intensity')
plt.plot(one_large_line_wavenumber, one_large_line_amplitude)
plt.show()
1791/22:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050 or x < 1150) for x in one_large_line_wavenumber]
print(bools)

fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])
#x, A, X, sigma,C
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/23:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050 or x < 1150) for x in one_large_line_wavenumber]
print(len(bools))

fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])
#x, A, X, sigma,C
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/24:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050 or x < 1150) for x in one_large_line_wavenumber]
one_large_line_wavenumber = one_large_line_wavenumber[bools]
one_large_line_amplitude = one_large_line_amplitude[bools]

fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])
#x, A, X, sigma,C
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/25:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050 or x < 1150) for x in one_large_line_wavenumber]
print(bools)
one_large_line_wavenumber = one_large_line_wavenumber[bools]
one_large_line_amplitude = one_large_line_amplitude[bools]

fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])
#x, A, X, sigma,C
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/26:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050) for x in one_large_line_wavenumber]
print(bools)
one_large_line_wavenumber = one_large_line_wavenumber[bools]
one_large_line_amplitude = one_large_line_amplitude[bools]

fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])
#x, A, X, sigma,C
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/27:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050 or x < 1150) for x in one_large_line_wavenumber]
print(bools)
one_large_line_wavenumber = one_large_line_wavenumber[bools]
one_large_line_amplitude = one_large_line_amplitude[bools]

fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])
#x, A, X, sigma,C
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/28:
import numpy as np
import matplotlib.pyplot as plt

wavenumber, amplitude = np.loadtxt('Magnesite.txt', unpack=True)
plt.plot(wavenumber, amplitude)
plt.xlabel('Raman shift (cm$^{-1}$)')
plt.ylabel('Intensity (normalized)')
plt.title('Whole Spectrum')
plt.show()

plt.title('One of the strongest spectral lines')
max_amp_index = np.argmax(amplitude)
one_large_line_wavenumber = wavenumber[max_amp_index - 200:max_amp_index + 200]
one_large_line_amplitude = amplitude[max_amp_index - 200:max_amp_index + 200]
plt.xlabel('wavenumber')
plt.ylabel('intensity')
plt.plot(one_large_line_wavenumber, one_large_line_amplitude)
plt.show()
1791/29:
def Gaussian(x, A, X, sigma,C):
    return A*np.exp(-(x-X)**2/(2*sigma**2)) + C

x = np.linspace(-3,3)
plt.plot(x,Gaussian(x,1,0,1,2))
1791/30: plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')
1791/31:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050 and x < 1150) for x in one_large_line_wavenumber]
print(bools)
one_large_line_wavenumber = one_large_line_wavenumber[bools]
one_large_line_amplitude = one_large_line_amplitude[bools]

fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])
#x, A, X, sigma,C
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/32:
import numpy as np
import matplotlib.pyplot as plt

wavenumber, amplitude = np.loadtxt('Magnesite.txt', unpack=True)
plt.plot(wavenumber, amplitude)
plt.xlabel('Raman shift (cm$^{-1}$)')
plt.ylabel('Intensity (normalized)')
plt.title('Whole Spectrum')
plt.show()

plt.title('One of the strongest spectral lines')
max_amp_index = np.argmax(amplitude)
one_large_line_wavenumber = wavenumber[max_amp_index - 200:max_amp_index + 200]
one_large_line_amplitude = amplitude[max_amp_index - 200:max_amp_index + 200]
plt.xlabel('wavenumber')
plt.ylabel('intensity')
plt.plot(one_large_line_wavenumber, one_large_line_amplitude)
plt.show()
1791/33:
def Gaussian(x, A, X, sigma,C):
    return A*np.exp(-(x-X)**2/(2*sigma**2)) + C

x = np.linspace(-3,3)
plt.plot(x,Gaussian(x,1,0,1,2))
1791/34: plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')
1791/35:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050 and x < 1150) for x in one_large_line_wavenumber]
print(bools)
one_large_line_wavenumber = one_large_line_wavenumber[bools]
one_large_line_amplitude = one_large_line_amplitude[bools]

fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])
#x, A, X, sigma,C
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/36:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050 and x < 1150) for x in one_large_line_wavenumber]
print(bools)
one_large_line_wavenumber = one_large_line_wavenumber[bools]
one_large_line_amplitude = one_large_line_amplitude[bools]

plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])
#x, A, X, sigma,C


print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/37:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050 and x < 1150) for x in one_large_line_wavenumber]
print(bools)
one_large_line_wavenumber = one_large_line_wavenumber[bools]
one_large_line_amplitude = one_large_line_amplitude[bools]

plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1100,59,0.5])
#x, A, X, sigma,C


print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/38:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050 and x < 1150) for x in one_large_line_wavenumber]
print(bools)
one_large_line_wavenumber = one_large_line_wavenumber[bools]
one_large_line_amplitude = one_large_line_amplitude[bools]

plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

#x, A, X, sigma,C
fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude)



print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/39:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050 and x < 1150) for x in one_large_line_wavenumber]
print(bools)
one_large_line_wavenumber = one_large_line_wavenumber[bools]
one_large_line_amplitude = one_large_line_amplitude[bools]

plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

#x, A, X, sigma,C
fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude)



print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000,p0=[1,1050,20,0])
plt.plot(x,Gaussian(x,*fit[0]))
1791/40:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050 and x < 1150) for x in one_large_line_wavenumber]
print(bools)
one_large_line_wavenumber = one_large_line_wavenumber[bools]
one_large_line_amplitude = one_large_line_amplitude[bools]

plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

#x, A, X, sigma,C
fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1050,20,0])



print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/41:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050 and x < 1150) for x in one_large_line_wavenumber]
print(bools)
one_large_line_wavenumber = one_large_line_wavenumber[bools]
one_large_line_amplitude = one_large_line_amplitude[bools]

plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

#x, A, X, sigma,C
fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1050,50,0])



print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/42:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050 and x < 1150) for x in one_large_line_wavenumber]
print(bools)
one_large_line_wavenumber = one_large_line_wavenumber[bools]
one_large_line_amplitude = one_large_line_amplitude[bools]

plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

#x, A, X, sigma,C
fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1050,60,0])



print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/43:
def Lorentzian(v,wumbo,v_0):
    return 1/(2*np.pi)*((wumbo)/((v-v_0)**2+(wumbo/2)**2))
1791/44:
def Lorentzian(v,wumbo,v_0):
    return 1/(2*np.pi)*((wumbo)/((v-v_0)**2+(wumbo/2)**2))

v = np.linspace(0,3)
plt.plot(x,Lorentzian(v,2,0))
1791/45:
def Lorentzian(v,wumbo,v_0):
    return 1/(2*np.pi)*((wumbo)/((v-v_0)**2+(wumbo/2)**2))

v = np.linspace(0,3,50)
plt.plot(x,Lorentzian(v,2,0))
1791/46:
def Lorentzian(v,wumbo,v_0):
    return 1/(2*np.pi)*((wumbo)/((v-v_0)**2+(wumbo/2)**2))

v = np.linspace(0,3,50)
plt.plot(v,Lorentzian(v,2,0))
1791/47:
def Lorentzian(v,wumbo,v_0):
    return 1/(2*np.pi)*((wumbo)/((v-v_0)**2+(wumbo/2)**2))

v = np.linspace(-3,3,50)
plt.plot(v,Lorentzian(v,2,0))
1791/48:
def Lorentzian(v,A,wumbo,v_0,C):
    return A*((wumbo)/((v-v_0)**2+(wumbo/2)**2)) + C

v = np.linspace(-3,3,50)
plt.plot(v,Lorentzian(v,1,2,0,2))
1791/49: fit = curve_fit(Lorentzian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1050,60,0])
1791/50:
fit = curve_fit(Lorentzian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1050,60,0])
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')
1791/51:
fit = curve_fit(Lorentzian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1050,60,0])
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')
v = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(v,Lorentzian(v,*fit[0]))
1791/52:
L_fit = curve_fit(Lorentzian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1050,60,0])
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')
v = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(v,Lorentzian(v,*L_fit[0]))
1791/53:
L_fit = curve_fit(Lorentzian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,110,60,0])
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')
v = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(v,Lorentzian(v,*L_fit[0]))
1791/54:
import numpy as np
import matplotlib.pyplot as plt

wavenumber, amplitude = np.loadtxt('Magnesite.txt', unpack=True)
plt.plot(wavenumber, amplitude)
plt.xlabel('Raman shift (cm$^{-1}$)')
plt.ylabel('Intensity (normalized)')
plt.title('Whole Spectrum')
plt.show()

plt.title('One of the strongest spectral lines')
max_amp_index = np.argmax(amplitude)
one_large_line_wavenumber = wavenumber[max_amp_index - 200:max_amp_index + 200]
one_large_line_amplitude = amplitude[max_amp_index - 200:max_amp_index + 200]
plt.xlabel('wavenumber')
plt.ylabel('intensity')
plt.plot(one_large_line_wavenumber, one_large_line_amplitude)
plt.show()
1791/55:
def Gaussian(x, A, X, sigma,C):
    return A*np.exp(-(x-X)**2/(2*sigma**2)) + C

x = np.linspace(-3,3)
plt.plot(x,Gaussian(x,1,0,1,2))
1791/56: plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')
1791/57:
from scipy.optimize import curve_fit



print(one_large_line_wavenumber.size)
bools = [(x > 1050 and x < 1150) for x in one_large_line_wavenumber]
print(bools)
one_large_line_wavenumber = one_large_line_wavenumber[bools]
one_large_line_amplitude = one_large_line_amplitude[bools]

plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')

#x, A, X, sigma,C
fit = curve_fit(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,1050,60,0])



print(one_large_line_wavenumber.size)
x = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(x,Gaussian(x,*fit[0]))
1791/58:
def Lorentzian(v,A,wumbo,v_0,C):
    return A*((wumbo)/((v-v_0)**2+(wumbo/2)**2)) + C

v = np.linspace(-3,3,50)
plt.plot(v,Lorentzian(v,1,2,0,2))
1791/59:
L_fit = curve_fit(Lorentzian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,110,60,0])
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')
v = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(v,Lorentzian(v,*L_fit[0]))
1791/60:
def chi_squared(func,x,y,params=[]):
    fit = func(x,*params)
    return ((fit-y)**2).sum()
1791/61:
def chi_squared(func,x,y,params=[]):
    fit = func(x,*params)
    return ((fit-y)**2).sum()
    
chi_squared(Lorentzian,one_large_line_wavenumber,one_large_line_amplitude,params=*fit[0])
1791/62:
def chi_squared(func,x,y,params=[]):
    fit = func(x,*params)
    return ((fit-y)**2).sum()
    
chi_squared(Lorentzian,one_large_line_wavenumber,one_large_line_amplitude,params=fit[0])
1791/63:
L_fit = curve_fit(Lorentzian,one_large_line_wavenumber,one_large_line_amplitude,p0=[1,110,60,0])
plt.scatter(one_large_line_wavenumber, one_large_line_amplitude,marker='.')
v = np.linspace(one_large_line_wavenumber.min(),one_large_line_wavenumber.max(),1000)
plt.plot(v,Lorentzian(v,*L_fit[0]))
1791/64:
def chi_squared(func,x,y,params=[]):
    fit = func(x,*params)
    return ((fit-y)**2).sum()
    
print(f'Chi_Squared for Lorentzian{chi_squared(Lorentzian,one_large_line_wavenumber,one_large_line_amplitude,params=L_fit[0]}')
1791/65:
def chi_squared(func,x,y,params=[]):
    fit = func(x,*params)
    return ((fit-y)**2).sum()
    
print(f'Chi_Squared for Lorentzian: {chi_squared(Lorentzian,one_large_line_wavenumber,one_large_line_amplitude,params=L_fit[0]}')
1791/66:
def chi_squared(func,x,y,params=[]):
    fit = func(x,*params)
    return ((fit-y)**2).sum()
    
print(f'Chi_Squared for Lorentzian: {chi_squared(Lorentzian,one_large_line_wavenumber,one_large_line_amplitude,params=L_fit[0])}')
1791/67:
def chi_squared(func,x,y,params=[]):
    fit = func(x,*params)
    return ((fit-y)**2).sum()
    
print(f'Chi_Squared for Lorentzian: {chi_squared(Lorentzian,one_large_line_wavenumber,one_large_line_amplitude,params=L_fit[0])}')
print(f'Chi_Squared for Lorentzian: {chi_squared(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,params=fit[0])}')
1791/68:
def chi_squared(func,x,y,sigma,params=[]):
    fit = func(x,*params)
    return ((fit-y)**2).sum()
    
print(f'Chi_Squared for Lorentzian: {chi_squared(Lorentzian,one_large_line_wavenumber,one_large_line_amplitude,0.02,params=L_fit[0])}')
print(f'Chi_Squared for Lorentzian: {chi_squared(Gaussian,one_large_line_wavenumber,one_large_line_amplitude,0.02,params=fit[0])}')
1801/1: 0.407*92
2168/1: import numpy as np
2168/2: t = np.array([0.89,0.90,0.95,0.93,0.95])
2168/3: t.mean()
2168/4: t.std(ddof=1)
2168/5: t.std(ddof=1)/t.size
2205/1: fro fit import fit
2205/2: from fit import fit
2205/3: fit(23,0.072,1.345e6,3.37e5,0.926,66,6,50,54)
2205/4:
fit(23,0.072,1.345e6,3.37e5,0.926,66,6,50,54


)
2206/1: %load_ext autoreload
2206/2: %autoreload 2
2206/3: from fit import fit
2206/4: fit(23,0.072,1.345e6,3.37e5,0.926,66,6,50,54)
2206/5: fit(20,0.072,1.345e6,3.37e5,0.926,66,6,50,54)
2206/6: fit(20.1,0.072,1.345e6,3.37e5,0.926,66,6,50,54)
2206/7: fit(20.01,0.072,1.345e6,3.37e5,0.926,66,6,50,54)
2206/8: fit(19.01,0.072,1.345e6,3.37e5,0.926,66,6,50,54)
2206/9: fit(15,0.072,1.345e6,3.37e5,0.926,66,6,50,54)
2206/10: fit(15,0.072,1.345e6,3.37e5,0.926,66,6,50,54,5.15)
2206/11: fit(14.8,0.072,1.345e6,3.37e5,0.926,66,6,50,54,5.15)
2208/1: %load_ext
2208/2: %load_ext autoreload
2208/3: %autoreload 2
2208/4: from fit import helper
2208/5: helper(14.8,1.3e6,3.4e5)
2208/6: helper(14.9,1.3e6,3.4e5)
2208/7: helper(14.5,1.3e6,3.4e5)
2208/8: helper(14.9,1.3e6,3.4e5)
2208/9: helper(14.9,1.3e6,3.4e5)
2208/10: helper(15,1.3e6,3.4e5)
2208/11: helper(16,1.3e6,3.4e5)
2208/12: helper(16,1.3e6,3.4e5)
2208/13: helper(15,1.3e6,3.4e5)
2208/14: helper(15,1.3e6,3.4e5)
2341/1: import numpy as np
2341/2: r3 = 24.6
2341/3: r1_r3 = np.array([81.9,81.8,81.8,82.0,81.9])
2341/4: r3 = 24.6/2
2341/5: r1_r3.mean()
2341/6: r1_r3.std()/r1_r3.size
2341/7: 81.88+r3
2341/8: r3_r2=np.array([19.4,19.8,19.9,19.5,19.8,19.5,19.8,19.6])
2341/9: r3_r2.mean()
2341/10: r3_r2.std()/r3_r2.size
2341/11: r3
2341/12: s2 = np.array([11.3,11.4,11.4,11.5,11.4])
2341/13: s2.mean()
2341/14: s2.std()/s2.size
2341/15: s1 = np.array([8.3,8.5,8.4,8.7,8.5])
2341/16: s1.mean()
2341/17: s1.std()/s1.size
2397/1: import scipy.constants as pc
2397/2: pc.k
2397/3: import numpy as np
2397/4: np.sqrt(3*pc.k*2e5/40e-27)
2397/5: m_argon = 40e-27 #kg
2397/6: import matplotlib.pyplot as plt
2397/7: pc.A
2397/8: pc.N_A
2397/9: pc.k?
2397/10: m_argon = 40/pc.N_A
2397/11: m_argon = m_argon*10^-3
2397/12: m_argon = m_argon*10**-3
2397/13: m_argon
2397/14: v_bar = 3*pc.k*1e6/m_argon
2397/15: v_bar
2397/16: np.sqrt(v_bar/3)
2397/17: np.sqrt(6e9/3)
2397/18: np.sqrt(6e8/3)
2397/19: pc.k*1e6/(3*m_argon)
2397/20: m_h = 1/p.N_A*1e-3
2397/21: m_h = 1/pc.N_A*1e-3
2397/22: m_h
2397/23: np.sqrt(pc.k*1e5/m_h)
2397/24: sigma_v = np.sqrt(pc.k*1e5/m_h)
2397/25: sigma_v
2397/26: sigma_l = (pc.c+simga_v)/pc.c*410
2397/27: sigma_l = (pc.c+sigma_v)/pc.c*410
2397/28: simga_l
2397/29: sigma_l
2397/30: sigma_l = (pc.c+sigma_v)/pc.c*410-410
2397/31: sigma_l
2397/32: sigma_v = np.sqrt(pc.k*3e5/m_h)
2397/33: sigma_v
2397/34: sigma_l = (pc.c+sigma_v)/pc.c*410-410
2397/35: sigma_l
2397/36: sigma_l*2
2397/37: sigma_v = np.sqrt(pc.k*1e6/m_h)
2397/38: sigma_v
2397/39: sigma_l = (pc.c+sigma_v)/pc.c*410-410
2397/40: sigma_l
2397/41: sigma_l*2
2397/42: sigma_l*3
2397/43: sigma_v/pc.c
2397/44: sigma_v/pc.c*410
2397/45: sigma_v/pc.c*410*3
2397/46: ls
2397/47: ls
2397/48: import os
2397/49: data = np.loadtxt(os.join('20220413-0001','20220413-0001_1.csv'))
2397/50: data = np.loadtxt(os.path.join('20220413-0001','20220413-0001_1.csv'))
2397/51: data = np.loadtxt(os.path.join('20220413-0001','20220413-0001_1.csv'),delimiter=',',skiprows=1)
2397/52: data = np.loadtxt(os.path.join('20220413-0001','20220413-0001_1.csv'),delimiter=',',skiprows=2)
2397/53: data
2397/54: data[0]
2397/55: data.transpose()[0]
2397/56: time = data.transpose()[0]
2397/57: voltage = data.transpose()[1]
2397/58: import matplotlib.pyplot as plt
2397/59: plt.plot(time,voltage)
2397/60: plt.show()
2397/61: time = np.array()
2397/62: time = np.array([])
2397/63: voltage = np.array([])
2397/64:
for f_name in os.listdir('20220413-0001'):
    data = np.loadtxt(os.path.join('20220413-0001',f_name))
2397/65: time = []
2397/66: voltage = []
2397/67: time = np.array([])
2397/68: voltage = np.array([])
2397/69:
for f_name in os.listdir('20220413-0001'):
    data = np.loadtxt(os.path.join('20220413-0001',f_name))
    np.append(time, data.transpose()[0])
    np.append(voltage, data.transpose()[1])
2397/70:
for f_name in os.listdir('20220413-0001'):
    data = np.loadtxt(os.path.join('20220413-0001',f_name,skiprows=2))
    np.append(time, data.transpose()[0])
    np.append(voltage, data.transpose()[1])
2397/71:
for f_name in os.listdir('20220413-0001'):
    data = np.loadtxt(os.path.join('20220413-0001',f_name),skiprows=2)
    np.append(time, data.transpose()[0])
    np.append(voltage, data.transpose()[1])
2397/72:
for f_name in os.listdir('20220413-0001'):
    data = np.loadtxt(os.path.join('20220413-0001',f_name),delimiter=',',skiprows=2)
    np.append(time, data.transpose()[0])
    np.append(voltage, data.transpose()[1])
2397/73: plt.plot(time,voltage)
2397/74: plt.show()
2397/75: time
2397/76:
for f_name in os.listdir('20220413-0001'):
    data = np.loadtxt(os.path.join('20220413-0001',f_name),delimiter=',',skiprows=2)
    time = np.append(time, data.transpose()[0])
    voltage = np.append(voltage, data.transpose()[1])
2397/77: plt.plot(time,voltage)
2397/78: plt.show()
2408/1: import scipy.constants as pc
2408/2: sig_l = 0.17
2408/3: m_h = 1/pc.N_A*10e-3
2408/4: m_h
2408/5: lambda_0 = 487e-9 #m
2408/6: pc.k
2408/7: T_h = (sig_l**2*pc.c**2*m_h)/(\lambda_0**2*pc.k)
2408/8: T_h = (sig_l**2*pc.c**2*m_h)/(lambda_0**2*pc.k)
2408/9: T_h
2408/10: sig_l = 0.17e-9
2408/11: T_h = (sig_l**2*pc.c**2*m_h)/(lambda_0**2*pc.k)
2408/12: T_h
2408/13: T_h/3
2408/14: sig_l = 0.17
2408/15: lambda_0 = 487
2408/16: T_h = (sig_l**2*pc.c**2*m_h)/(lambda_0**2*pc.k)
2408/17: T_h
2408/18: np.sqrt(T_h)
2408/19: import numpy as np
2408/20: np.sqrt(T_h)
2408/21: sig_l = 0.007
2408/22: T_h = (sig_l**2*pc.c**2*m_h)/(lambda_0**2*pc.k)
2408/23: T_h
2408/24: sig_l = 0.17e-9
2408/25: l = 486e9
2408/26: T_h = (sig_l**2*pc.c**4*m_h*l**2)/(pc.k)
2408/27: T_h
2408/28: T_h = (sig_l**2*pc.c**2*m_h*l**2)/(pc.k)
2408/29: T_h
2408/30: sig_l
2408/31: l
2408/32: l**2
2408/33: l = 486e-9
2408/34: l**2
2408/35: pc.c**2
2408/36: f = pc.c/l
2408/37: f
2408/38: T_h = (sig_l**2*pc.c**2*m_h)/(f**2*pc.k)
2408/39: T_h
2408/40: l = 486
2408/41: f = pc.c/l
2408/42: f
2408/43: T_h = (sig_l**2*pc.c**2*m_h)/(f**2*pc.k)
2408/44: T_h
2408/45: sig_l = 0.17e-9
2408/46: T_h = (sig_l**2*pc.c**2*m_h)/(f**2*pc.k)
2408/47: T_h
2412/1: import scipy.constants a spc
2412/2: import scipy.constants as pc
2412/3: m_h = 1.6735575e-27
2439/1: import scipy.constants a spc
2439/2: import scipy.constants as pc
2439/3: m_h = 1.6735575e-27
2439/4: np.sqrt((pc.k*2e4/m_h)*(490e-9/pc.c)**2)
2439/5: import numpy as np
2439/6: np.sqrt((pc.k*2e4/m_h)*(490e-9/pc.c)**2)
2510/1: import matplotlib.pyplot as plt
2600/1: ls
2600/2: from Pulse_Analysis import load_sim
2600/3: load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/1: %load_ext autoreload
2601/2: %autoreload 2
2601/3: from Pulse_Analysis import load_sim
2601/4: load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/5: load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/6: load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/7: load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/8: load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/9: load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/10: load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/11: load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/12: load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/13: load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/14: load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/15: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/16: data.shape
2601/17: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/18: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/19: type(data)
2601/20: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/21: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/22: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/23: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/24: data
2601/25: data.shape
2601/26: data.shape
2601/27: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/28: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/29: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/30: import numpy as np
2601/31: np.empty(2)
2601/32: np.empty([2])
2601/33: np.empty([2,2])
2601/34: np.empty([0,0])
2601/35: np.empty([0,0,0])
2601/36: two = np.empty([0,0])
2601/37: np.append([0,1,2,6],two,axis=1)
2601/38: np.append([0,1,2,6],two)
2601/39: np.append([0,1,2,6],two)
2601/40: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/41: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/42: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/43: data
2601/44: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/45: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/46: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/47: data
2601/48: np.array(data)
2601/49: d = np.array(data)
2601/50: type(d)
2601/51: type(d[0])
2601/52: type(d[0][0])
2601/53: d[0]
2601/54: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/55: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/56: data
2601/57: d = np.array(data)
2601/58: d
2601/59: d = np.array(data,dtype=np.double)
2601/60: d = np.array(data,dtype=object)
2601/61: d
2601/62: data
2601/63: data[0][0][0]
2601/64: len(data)
2601/65: d.shape
2601/66: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/67: f = open('LT1363 LED driver ADL_v1.txt')
2601/68: f = open('LT1363 LED driver ADL_v1.txt')
2601/69: import os
2601/70: f = open(os.path.join('Data', 'LT1363 LED driver ADL_v1.txt'))
2601/71: f
2601/72: f.readlines()
2601/73: f[-1]
2601/74: f = open(os.path.join('Data', 'LT1363 LED driver ADL_v1.txt'))
2601/75: lines = f.readlines()
2601/76: lines[-1]
2601/77: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/78: len(data)
2601/79: data = [[[0,1],[1,0]],[[2,0],[2,3]]]
2601/80: data
2601/81: np.array(data)
2601/82: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/83: np.array(data)
2601/84:
for i in data:
    print(len(i))
2601/85: cols, run, data = load_sim('Data/LT1363 LED driver ADL_v1.txt')
2601/86: data
2601/87: run
2613/1: import ltspice
2613/2: import LTSpiceBatch
2614/1: from LTSpiceBatch import SimCommander
2614/2: LTC = SimCommander('Automation_Test.asc')
2619/1: import scipy.constants as pc
2619/2: pc.e
2619/3: pc.k
2619/4: quit)(
2666/1: import h5py as h5
2666/2: file = h5.File('NoLEDTriaal.h5', 'r')
2666/3: file
2666/4: list(file.keys())
2666/5: import numpy as np
2666/6: dset = file['Waveforms']
2666/7: dset
2666/8: dset.keys()
2666/9: import matplotlib.pyplot as plt
2666/10: type(dset['Channel 4'])
2666/11: dset['Channel 4'].keys()
2666/12: type(dset['Channel 4']['Channel 4 Data'])
2666/13: I = dset['Channel 4']['Channel 4 Data']
2666/14: I.shape()
2666/15: I.shape
2666/16: 64012/2
2666/17: I
2666/18: I.dtype
2666/19: I[15]
2666/20: I[0:20]
2666/21: t = np.linspace(0,2,I.shape[0])
2666/22: t
2666/23: plt.plot(t, I[0:I.shape[0]])
2667/1: import numpy as np
2667/2: import h5py as h5
2667/3: import matplotlib.pyplot as plt
2667/4: f = h5.File('NoLEDTriaal.h5', 'r')
2667/5: I = f['Waveforms']['Channel 4']['Channel 4 Data']
2667/6: I.shape
2667/7: I = f['Waveforms']['Channel 3']['Channel 3 Data']
2667/8: I = f['Waveforms']['Channel 4']['Channel 4 Data']
2667/9: V = f['Waveforms']['Channel 3']['Channel 3 Data']
2667/10: V.shape
2667/11: f.keys()
2667/12: f['FileType']
2667/13: f['Frame']
2667/14: f['Frame'].keys
2667/15: f['Frame'].keys()
2667/16: I.dtype
2667/17: t = np.linspace(0,2,I.shape[0])
2667/18: t.shape
2667/19: plt.plot(t[0:1000], I[])
2667/20: plt.plot(t[0:1000], I[0:1000])
2667/21: I = np.array(I)
2667/22: I
2667/23: plt.plot(t[0:1000], I[0:1000])
2667/24: plt.show()
2667/25: plt.plot(t, I)
2667/26: plt.show()
2667/27: plt.plot(t, V)
2667/28: plt.show()
2667/29: plt.plot(t, I)
2667/30: plt.show()
2667/31: plt.plot(t, I)
2667/32: plt.show()
2667/33: I = f['Waveforms']['Channel 3']['Channel 3 Data']
2667/34: I = f['Waveforms']['Channel 4']['Channel 4 Data']
2667/35: plt.plot(t, I)
2667/36: plt.show()
2667/37: QUIT()
2674/1: from analysis import scope_data
2674/2: import numpy as np
2674/3: I = scope_data('NoLED/NoLEDTriaal.h5',4)
2674/4: I = scope_data('NoLED/NoLEDTriaal.h5',4,False)
2674/5: I.shape
2674/6: I
2675/1: from analysis import scope_data
2675/2: I = scope_data('NoLED/NoLEDTriaal.h5',4)
2675/3: I
2677/1: from analysis import scope_data, delta
2677/2: t_max = 2
2677/3: import os
2677/4: import numpy as np
2677/5: I = scope_data(os.path.join('NoLED', 'NoLEDTriaal.h5'), 4)
2677/6: V = scope_data(os.path.join('NoLED', 'NoLEDTriaal.h5'), 3)
2677/7: t = np.linspace(0,t_max,len(I))
2677/8: dt = []
2677/9: t_last = 0
2677/10:
for i in range(len(V) - 1):
        if np.abs(delta(V[i], V[i + 1])) > 30:
            dt.append(t[i + 1] - t_last)
            t_last = t[i + 1]
2677/11: dt
2677/12: len(dt)
2677/13: import matplotlib.pyplot as plt
2677/14: plt.plot(t, V)
2677/15: plt.show()
2677/16: plt.show()
2677/17: plt.plot(t, V)
2677/18: plt.plot(t, V)
2677/19: plt.show()
2677/20: plt.hist(dt)
2677/21: plt.show()
2677/22: dt.sort()
2677/23: dt
2677/24: dt.sum()
2677/25: np.sum(dt)
2677/26:
    while i < (len(V) - 1):
        if np.abs(delta(V[i], V[i + 1])) > 30:
            dt.append(t[i + 1] - t_last)
            t_last = t[i + 1]

            i = i + 20
        else:
            i = i + 1
2677/27: dit
2677/28: d
2677/29: dt
2677/30: len(dt)
2677/31: dt = []
2677/32:
    while i < (len(V) - 1):
        if np.abs(delta(V[i], V[i + 1])) > 30:
            dt.append(t[i + 1] - t_last)
            t_last = t[i + 1]

            i = i + 20
        else:
            i = i + 1
2677/33: len(dt)
2677/34: t_last = 0
2677/35:
    while i < (len(V) - 1):
        if np.abs(delta(V[i], V[i + 1])) > 30:
            dt.append(t[i + 1] - t_last)
            t_last = t[i + 1]

            i = i + 20
        else:
            i = i + 1
2677/36: dt
2677/37: i=0
2677/38:
    while i < (len(V) - 1):
        if np.abs(delta(V[i], V[i + 1])) > 30:
            dt.append(t[i + 1] - t_last)
            t_last = t[i + 1]

            i = i + 20
        else:
            i = i + 1
2677/39: dt
2677/40: len(dt)
2677/41: np.sum(dt)
2677/42: V = scope_data(os.path.join('NoLED', 'NoLEDTriaal.h5'), 3)
2677/43: len(V)
2677/44: t
2677/45: plt.plot(t,V)
2677/46: plt.show()
2677/47: V = scope_data(os.path.join('NoLED', 'NoLEDTriaal1.h5'), 3)
2677/48: len(V)
2677/49: t = np.linspace(0,50,len(V))
2677/50: plt.plot(t,V)
2677/51: plt.show()
2677/52: import h5py as ht
2677/53: import h5py as h5
2677/54: f = h5.
2677/55: f = h5.File('NoLED/NoLEDTriaal2.h5', 'r')
2677/56: f.keys()
2677/57: f['Waveforms']
2677/58: f['Waveforms'].keys()
2677/59: f['Waveforms']['Channel 4']['Channel 4 Data']
2677/60: ls
2677/61: cd NoLED
2677/62: ls
2677/63: csv = np.load_csv('NoLEDTriaal3_4.csv')
2677/64: csv = np.load_txt('NoLEDTriaal3_4.csv')
2677/65: csv = np.loadtxt('NoLEDTriaal3_4.csv', delimeter=',')
2677/66: csv = np.loadtxt('NoLEDTriaal3_4.csv', delimiter=',')
2677/67: csv = np.loadtxt('NoLEDTriaal3_4.csv')
2677/68: csv = np.loadtxt('NoLEDTriaal3_4.csv',delimiter=',')
2677/69: csv = np.loadtxt('NoLEDTriaal3_4.csv',delimiter=',',skiprows=1)
2677/70: csv = np.loadtxt('NoLEDTriaal3_4.csv',delimiter=',',skiprows=2)
2677/71: csv.shape
2677/72: plt.plot(csv[0],csv[1])
2677/73: plt.show()
2677/74: csv[0]
2677/75: len(csv[0])
2677/76: len(csv[1])
2677/77: csv = csv.transpose()
2677/78: csv.shape
2677/79: plt.plot(csv[0],csv[1])
2677/80: plt.show()
2677/81: plt.show()
2677/82: plt.plot(csv[0],csv[1])
2677/83: plt.plot(csv[0],csv[1])
2677/84: plt.show()
2686/1: import numpy as np
2686/2: csv = np.loadtxt(os.path.join('NoLED', 'NoLEDTriaal3_4.csv'), delimiter=',', skiprows=5).transpose()
2686/3: import os
2686/4: csv = np.loadtxt(os.path.join('NoLED', 'NoLEDTriaal3_4.csv'), delimiter=',', skiprows=5).transpose()
2686/5: I = csv[0]
2686/6: t = csv[1]
2686/7: import matplotlib.pyplot as plt
2686/8: plt.plot(t,I)
2686/9: plt.show()
2686/10: plt.plot(I,t)
2686/11: plt.show()
2689/1: import pyvisa
2690/1: import pyvisa
2690/2: rm = pyvisa.ResourceManager()
2691/1: import pyvisa
2691/2: rm = pyvisa.ResourceManager()
2691/3: rm.list_resources()
2692/1: import pyvisa
2692/2: rm = pyvisa.ResourceManager()
2692/3: rm.list_resources()
2692/4: addy = 'USB0::0x2A8D::0x1770::MY57251401::0::INSTR'
2692/5: inst = rm.open_resource(addy)
2693/1: import numpy as np
2693/2: ls
2693/3: import os
2693/4: os.list_dir(Breakdown_Measurements)
2693/5: os.listdir(Breakdown_Measurements)
2693/6: os.listdir('Breakdown_Measurements')
2693/7: base_dir = 'Breakdown_Measurements'
2693/8: sub_dirs = os.listdir(base_dir)
2693/9: v770 = os.path.join(base_dir, sub_dirs[1])
2693/10: v770
2693/11: os.listdir(v770)
2693/12: trial_3 = np.load(os.path.join(v770, 'trial_3.npy'))
2693/13: import matplotlib.pyplot as plt
2693/14: V = trial_3[1]
2693/15: I = trial_3[2]
2693/16: t = trial_3[0]
2693/17: plt.plot(t,V)
2693/18: plt.show()
2693/19: dv = np.array([V[i]-V[i-1] for i in range(1, len(V))])
2693/20: plt.plot(t,dv)
2693/21: plt.plot(t[1:len(t)],dv)
2693/22: plt.show()
2693/23: plt.scatter(t[1:len(t)],dv,marker='.')
2693/24: plt.show()
2693/25: plt.scatter(t[1:len(t)],dv,marker='.')
2693/26: plt.plot(t[1:len(t)], V)
2693/27: plt.plot(t[1:len(t)], V[1:len(V)])
2693/28: plt.show()
2693/29: plt.scatter(t[1:len(t)],dv,marker='.')
2693/30: plt.plot(t[1:len(t)], V[1:len(V)],color='r')
2693/31: plt.show()
2693/32: plt.scatter(t[1:len(t)],dv,marker='.')
2693/33: plt.plot(t[1:len(t)], V[1:len(V)],color='r')
2693/34: plt.grid()
2693/35: plt.show()
2694/1: import numpy as np
2694/2: import os
2694/3: ls
2694/4: base_dir = 'Breakdwon_Measurements'
2694/5: sub_dirs = os.listdir(base_dir)
2694/6: base_dir = 'Breakdown_Measurements'
2694/7: sub_dirs = os.listdir(base_dir)
2694/8: subd_dirs
2694/9: sub_dirs
2694/10: v770 = os.path.join(base_dir, sub_dirs[1])
2694/11: os.listdir(v770)
2694/12: data = np.load(os.path.join(v770, 'trial_5.npy'))
2694/13: data.shape
2694/14: V = data[1]
2694/15: I = data[2]
2694/16: t = data[1]
2694/17: import matplotlib.pyplot as plt
2694/18: plt.plot(t,V)
2694/19: plt.show()
2694/20: len(V)
2694/21: len(t)
2694/22: t[0:100]
2694/23: t = data[0]
2694/24: t[0:100]
2694/25: plt.plot(t,V)
2694/26: plt.show()
2694/27: from analysis_functions import dt
2694/28: d = dt(V,t)
2694/29: len(d)
2694/30: plt.hist(d,bins=20)
2694/31: plt.show()
2694/32: plt.hist(d,bins=30)
2694/33: plt.show()
2694/34: plt.hist(d,bins=15)
2694/35: plt.show()
2694/36: %load_ext autoreload
2694/37: %autoreload 2
2694/38: from analysis_functions import dt, dt_from_measurement_dir
2694/39: d = dt_from_measurement_dir(v770)
2694/40: d = dt_from_measurement_dir(v770)
2694/41: d = dt_from_measurement_dir(v770)
2694/42: len(d)
2694/43: d = dt_from_measurement_dir(v770)
2694/44: len(d)
2694/45: np.hist(d,bins=30)
2694/46: plt.hist(d,bins=30)
2694/47: plt.show()
   1: import numpy as np
   2: import matplotlib.pyplot as plt
   3: from analysis_functions import dt_from_measurement_dir
   4: import os
   5: ls
   6: base = 'Breakdown_Measurements'
   7: sub_dirs = os.listdir(base)
   8: sub_dirs
   9: v770 = os.path.join(base, sub_dirs[1])
  10: v1540 = os.path.join(base, sub_dirs[2])
  11: v2310 = os.path.join(base,sub_dirs[0])
  12: plt.grid()
  13: dt770 = dt_from_measurement_dir(v770)
  14: dt1540 = os.path.join(v1540)
  15: dt1540 = dt_from_measurement_dir(v1540)
  16: dt2310 = dt_from_measurement_dir(v2310)
  17: plt.hist(dt770,bins=100,density=True,color='green',edgecolor='black')
  18: plt.xlabel('dt (s)')
  19: plt.ylabel('Probability')
  20: plt.title('Discharge Distribution: 770 V and 0.05 mm Gap')
  21: plt.show()
  22: plt.hist(dt770,bins=80,color='green',edgecolor='black')
  23: plt.show()
  24: plt.hist(dt770,bins=70,color='green',edgecolor='black')
  25: plt.show()
  26: plt.grid()
  27: plt.hist(dt770,bins=100,density=True,color='green',edgecolor='black')
  28: plt.title('Discharge Distribution: 770 V and 0.05 mm Gap')
  29: plt.xlabel('dt (s)')
  30: plt.ylabel('Count')
  31: plt.hist(dt770,bins=70,color='green',edgecolor='black')
  32: plt.savefig('V770_0.05mm.png')
  33: plt.show()
  34: plt.show()
  35: plt.grid()
  36: plt.xlabel('dt (s)')
  37: from analysis_functions import dt_hist
  38: %load_ext autoreload
  39: %autoreload 2
  40: %load_ext autoreload
  41: from analysis_functions import dt_hist
  42: dt_hist(dt770,770,0.05,70)
  43: dt_hist(dt770,770,0.05,70)
  44: dt_hist(dt770,770,0.05,70)
  45: dt_hist(dt770,770,0.05,70)
  46: dt_hist(dt770,770,0.05,70)
  47: dt_hist(dt770,770,0.05,'green',70)
  48: dt_hist(dt1540,1540,0.05,'green',70)
  49: dt_hist(dt1540,1540,0.05,'red',70)
  50: dt_hist(dt2310,2310,0.05,'purple',70)
  51: len(dt2310)
  52: dt2310.sort()
  53: dt2310
  54: %history -g -f history
