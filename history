 1/1: import numpy
 1/2: import matplotlib.pyplot as plt
13/1: import pyvisa
13/2: rm = pyvisa.ResourceManager()
13/3: rm.list_resources()
13/4: inst = rm.open_resource('USB0::0x2A8D::0x1770::MY57251401::0::INSTR')
13/5: inst.query("*IDN?")
13/6: rm
13/7: inst
13/8: inst.read()
13/9: inst.query_ascii_values('CURV?')
13/10: inst.session
13/11: inst.read()
13/12: inst.read()
13/13: inst.write('*IDN?')
13/14: inst.read()
13/15: inst.resource_name
13/16: inst.write(':SAVE:WAVeform:FORMat ASCiixy')
13/17: inst.read()
13/18: import vysa
13/19: import visa
14/1: import pyvisa
14/2: rm
14/3: rm =
14/4: clear
15/1: import pyvisa
15/2: rm = pyvisa.ResourceManager()
15/3: rm.l
15/4: rm.list_resources()
15/5: addy = rm.list_resources()[0]
15/6: addy
15/7: inst = rm.open_resource(addy)
15/8: inst
15/9: idn = inst.query('*IDN?')
15/10: idn
15/11: idn = inst.write("*CLS")
15/12: inst.read()
15/13: inst.write("*RST")
16/1: import pyvisa
16/2: rm = pyvisa.ResourceManager()
16/3: rm.list_resources()
16/4: addy = rm.list_resources()[0]
16/5: inst = rm.open_resource(addy)
16/6: ls
16/7: inst
16/8: inst.write("*CLS")
16/9: inst.write("*RST")
16/10: inst.write(":AUToscale")
16/11: inst.write(":AUToscale")
16/12: inst.write(":TRIGger:MODE EDGE")
16/13: inst.query(':TRIGger:MODE?')
16/14: inst.query('*IDN?')
16/15: inst.query('*IDN?')
16/16: inst.query('*IDN?')
16/17: inst
16/18: inst.write("*CLS")
16/19: inst = rm.open_resource(addy)
16/20: ins
16/21: inst
16/22: inst.query('*IDN?')
17/1: import pyvisa
17/2: rm = pyvisa.ResourceManager()
17/3: addy = rm.list_resources()[0]
17/4: addy
17/5: inst = rm.open_resource(addy)
17/6: inst.query('*IDN?')
17/7: inst.close()
17/8: rm
17/9: rm.li
17/10: rm.list_resources()
17/11: rm.list_resources()
18/1: import pyvisa
18/2: rm = pyvisa.ResourceManager()
18/3: rm.list_resources()
18/4: rm.list_resources()
18/5: addy = rm.list_resources()[0]
18/6: addy
18/7: inst = rm.open_resource(addy)
18/8: inst
18/9: inst.query('*IDN?')
18/10: inst.write('CHANnel2:SCALe 0.05')
18/11: inst.write('CHANnel2:SCALe 0.005')
18/12: inst.write('CHANnel2:SCALe 0.5')
18/13: inst.write('CHANnel2:SCALe 0.3')
18/14: inst.write('CHANnel2:SCALe 0.1')
18/15: inst.write('CHANnel2:SCALe 0.5')
18/16: inst.write('CHANnel2:SCALe 0.8')
18/17: inst.write('CHANnel2:OFFSet -1')
18/18: inst.write('CHANnel2:OFFSet 1')
18/19: inst.write(':DIGitize CHANel2')
18/20: inst.query('*IDN?')
18/21: inst.query('*IDN?')
18/22: inst.query(':CHANnel2:OFFSet?')
21/1: import pyvisa
21/2: rm = pyvisa.ResourceManager()
21/3: rm.list_resources()
21/4: inst = rm.open_resource(addy)
21/5: addy = rm.list_resources()[0]
21/6: inst = rm.open_resource(addy)
21/7: inst
21/8: inst.?
21/9: ?inst
21/10: inst.query('*IDN?')
21/11: result = inst.query_binary_values(':SYSTem:SETup',datatype='s')
21/12: result = inst.query_binary_values(':SYSTem:SETup?',datatype='s')
21/13: result
21/14: type(result)
21/15: len(result)
21/16: inst.query(':TRIGger:MODE?')
21/17: inst.query(':TRIGger:MODE?')
21/18: inst.query(':TRIGger:MODE?')
21/19: inst.write('TRIGger:MODE EDGE')
21/20: inst.write('MEASure:VAMPlitude')
21/21: inst.query(':MEASure:VAMPlitude?')
21/22: inst.write(':HARDcopy: INKSaver OFF')
21/23: inst.write(':WAVeform:POINts:MODE RAW')
21/24: inst.query(':WAVeform:POINts:MODE?')
21/25: inst.write(':WAVeform:POINts 10240')
21/26: inst.write(':WAVefrom:SOURce CHANnel1')
21/27: inst.write(':WAVeform:FORMat BYTE')
21/28:
wav_form_dict = {
        0 : "BYTE",
        1 : "WORD",
        4 : "ASCii",
    }
21/29: wav_form_dict
21/30:
acq_type_dict = {
        0 : "NORMal",
        1 : "PEAK",
        2 : "AVERage",
        3 : "HRESolution",
    }
21/31: acq_type_dict
21/32: preamble = inst.query(':WAVeform:PREamble?')
21/33: preamble
21/34:
(
        wav_form, acq_type, wfmpts, avgcnt, x_increment, x_origin,
        x_reference, y_increment, y_origin, y_reference
    ) = preamble_string.split(",")
21/35:
(
        wav_form, acq_type, wfmpts, avgcnt, x_increment, x_origin,
        x_reference, y_increment, y_origin, y_reference
    ) = preamble.split(",")
21/36: acq_type
21/37: x_inc = inst.query(':WAVeform:XINCrement?')
21/38: x_inc
21/39: x_origin = inst.query(':WAVefrom:XORigin?')
21/40: x_origin = inst.query(':WAVefrom:XORigin?')
21/41: inst.timeout = 15000
21/42: x_origin = inst.query(':WAVefrom:XORigin?')
21/43: x_inc = inst.query(':WAVeform:XINCrement?')
21/44: sData = inst.query_binary_values(':WAVeform:DATA?', datatype='s')
21/45: sData
21/46: len(sData)
21/47: import matplotlib.pyplot as plt
21/48: import numpy as np
21/49: t = np.linspace(0,np.pi*1.5)
21/50: t = np.linspace(0,np.pi*1.5,len(s_data))
21/51: t = np.linspace(0,np.pi*1.5,len(sData))
21/52: plt.plot(t,sData)
21/53: plt.show()
21/54: fdsafdssadffdasfsad
21/55: ls
21/56: x_inc = inst.query(':WAVeform:XINCrement?')
21/57: x_inc = inst.query(':WAVeform:XINCrement?')
21/58: x_inc
21/59: x_origin = inst.query(':WAVeform:XORigin?')
21/60: x_origin
21/61: y_inc = inst.query(':WAVeform:YINCrement?')
21/62: y_inc
21/63: t_max = x_increment * len(sData)
21/64: t_max
41/1: import pyvisa
41/2: rm = pyvisa.ResourceManager()
41/3: addy = rm.list_resources()[0]
41/4: addy
41/5: inst = rm.open_resource(addy)
41/6: inst.write(':WAVeform:POINts:MODE RAW')
41/7: inst.write(':WAVeform:POINts: 3000000')
41/8: inst.query(':WAVeform:POINts?')
41/9: inst.write(':WAVeform:POINts: 2000000')
41/10: inst.query(':WAVeform:POINts?')
41/11: inst.write(':WAVeform:POINts: 1000000')
41/12: inst.query(':WAVeform:POINts?')
41/13: inst.write(':WAVeform:POINts: 100000')
41/14: inst.query(':WAVeform:POINts?')
41/15: inst.write(':WAVeform:POINts: 10000')
41/16: inst.query(':WAVeform:POINts?')
41/17: inst.write(':WAVeform:POINts 10000')
41/18: inst.query(':WAVeform:POINts?')
41/19: inst.write(':WAVeform:POINts 3000000')
41/20: inst.query(':WAVeform:POINts?')
41/21: inst.write(':WAVeform:SOURce CHANnel1')
41/22: inst.write(':WAVeform:FORMat BYTE')
41/23:
wav_form_dict = {
        0 : "BYTE",
        1 : "WORD",
        4 : "ASCii",
    }
41/24:
acq_type_dict = {
        0 : "NORMal",
        1 : "PEAK",
        2 : "AVERage",
        3 : "HRESolution",
    }
41/25: preamble = inst.query(':WAVeform:PREamble?')
41/26: preamble
41/27:
(
        wav_form, acq_type, wfmpts, avgcnt, x_increment, x_origin,
        x_reference, y_increment, y_origin, y_reference
    ) = preamble.split(",")
41/28: y_increment
41/29: y_increment = do_query_number(":WAVeform:YINCrement?")
41/30: y_increment = inst.query(":WAVeform:YINCrement?")
41/31: y_increment
41/32: wav_form
41/33: inst.write(':WAVeform:POINts 10000')
41/34: inst.query(':WAVeform:POINts?')
41/35: inst.write(':WAVeform:POINts MAX')
41/36: inst.query(':WAVeform:POINts?')
41/37: preamble
41/38: preamble.split(',')
41/39:
wav_form, acq_type, wfmpts, avgcnt, x_increment, x_origin,
            x_reference, y_increment, y_origin, y_reference = preamble.split(",")
41/40: wav, acq, wfmpts, avgcnt, x_inc, x_origin, x_ref, y_inc, y_origin, y_ref = preamble.split(",")
41/41: wav
41/42:
(wav, acq, wfmpts, avgcnt, x_inc, 
            x_origin, x_ref, y_inc, y_origin, y_ref) = preamble.split(",")
41/43: wav
41/44: x_ref
41/45: x_inc
41/46: preamble = inst.query(':WAVeform:PREamble?')
41/47: int(x_inc)
41/48: float(x_inc)
41/49: [float(i) for i in preamble.split(',')]
41/50:
(
            wav, acq, wfmpts, 
            avgcnt, x_inc, x_origin, 
            x_ref, y_inc, y_origin, y_ref
        ) = [float(i) for i in preamble.split(",")]
41/51: wav
41/52: inst.query_binary_values(':WAVeform:DATA?')
41/53: data = inst.query_binary_values(':WAVeform:DATA?')
41/54: data
41/55: len(data)
41/56: data = np.array(data)
41/57: import numpy as np
41/58: data = np.array(data)
41/59: data = np.array(inst.query_binary_values(':WAVeform:DATA?'))
41/60: data.shape
41/61: data[0:10]
41/62: data.size
41/63: x_inc
41/64: preamble = inst.query(':WAVeform:PREamble?')
41/65:
(
            wav, acq, wfmpts, 
            avgcnt, t_inc, t_0, 
            x_ref, y_inc, y_origin, y_ref
        ) = [float(i) for i in preamble.split(",")]
41/66: t_inc
41/67: t_inc * data*size
41/68: t_inc * data.size
41/69: t = np.linspace(t_0, t_inc*data.size, data.size)
41/70: import matplotlib.pyplot as plt
41/71: data = (data - y_ref) * y_inc + y_origin
41/72: plt.plot(t,data)
41/73: plt.show()
41/74: t_0
41/75: from Keysight_Methods import get_data
41/76: get_data(inst)
41/77: inst
41/78: inst
41/79: get_data(inst)
41/80: from Keysight_Methods import get_data
41/81: get_data(inst)
42/1: import pyvisa
42/2: rm = pyvisa.ResourceManager()
42/3: addy = rm.list_resources()[0]
42/4: %load_ext reload
42/5: %load_ext autoreload
42/6: %autoreload 2
42/7: addy
42/8: from Keysight_Methods import get_data
42/9: inst = rm.open_resource(addy)
42/10: get_data(inst)
42/11: get_data(inst)
42/12: get_data(inst)
42/13: inst.query(':WAVeform:SOURce?')
42/14: get_data(inst)
42/15: get_data(inst, points=10204)
42/16: inst.query(':WAVeform:POINts:MODE?')
42/17: inst.query(':WAVeform:FORMat?')
42/18: get_data(inst, points=10204)
42/19: get_data(inst, points=10204)
42/20: data = get_data(inst, points=10204)
42/21: max(data)
42/22: inst.write(':DIGitize CHANnel1')
42/23: inst.write(':DIGitize CHANnel1')
42/24: data = get_data(inst, points=10204)
43/1: import pyvisa
43/2: rm = pyvisa.ResourceManager()
43/3: addy = rm.list_resources()[0]
43/4: inst = rm.open_resource(addy)
43/5: inst.write('*CLS')
43/6: inst.write('*RST')
43/7: inst.write('AUToscale')
43/8: inst.write(':TRIGger:MODE EDGE')
43/9: inst.write(':TRIGger:EDGE:SOURce CHANnel1')
43/10: inst.write(':TRIGger:EDGE:LEVel 1.5')
43/11: inst.write(':TRIGger:EDGE:SLOpe POSitive')
43/12: inst.write(':ACQuire:TYPE NORMal')
43/13: inst.write(':DIGitize CHANnel1')
43/14: from Keysight_Methods import get_data
43/15: get_data(inst)
43/16: inst.write(':MEASure:SOURce CHANnel1')
43/17: inst.query(':MEASure:SOURce?')
43/18: inst.write(':MEASure:VAMPlitude')
43/19: inst.query(':MEASure:VAMPlitude?')
43/20: inst.write(':MEASure:VAMPlitude')
43/21: inst.write('WAV:FORM ASCII')
43/22: inst.write(':WAV:FORM ASCII')
43/23: inst.query(':WAV:FORM?')
43/24: data = inst.query_binary_values(':WAVeform:DATA?')
43/25: data = inst.query_ascii_values(':WAVeform:DATA?')
43/26: inst.timeout = 60
43/27: data = inst.query_ascii_values(':WAVeform:DATA?')
43/28: data = inst.query_ascii_values(':WAVeform:DATA?')
43/29: inst.write(':WAV:FORM BYTE')
43/30: inst.write(':WAV:FORM BYTE')
43/31: inst.timeout = 60000
43/32: data = inst.query_ascii_values(':WAVeform:DATA?')
44/1: import pyvisa
44/2: rm = pyvisa.ResourceManager()
44/3: addy = rm.list_resources()[0]
44/4: inst = rm.open_resource(addy)
44/5: inst.write(':WAV:FORM BYTE')
44/6: inst.timeout = 15000
44/7: inst.write(':WAVeform:FORMat BYTE')
44/8: inst.query('*IDN?')
   1: rm = pyvisa.ResourceManager()
   2: import pyvisa
   3: rm = pyvisa.ResourceManager()
   4: addy = rm.list_resources()[0]
   5: inst = rm.open_resource(addy)
   6: from Keysight_Methods import get_data
   7: data = get_data(inst)
   8: data = get_data(inst, points=10240)
   9: data
  10: max(data)
  11: %history -g -f history
